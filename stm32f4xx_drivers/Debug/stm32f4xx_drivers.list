
stm32f4xx_drivers.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000017a0  080001a0  080001a0  000011a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000044  08001940  08001940  00002940  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08001984  08001984  0000305c  2**0
                  CONTENTS
  4 .ARM          00000008  08001984  08001984  00002984  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800198c  0800198c  0000305c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800198c  0800198c  0000298c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08001990  08001990  00002990  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000005c  20000000  08001994  00003000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000016c  2000005c  080019f0  0000305c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200001c8  080019f0  000031c8  2**0
                  ALLOC
 11 .ARM.attributes 0000002a  00000000  00000000  0000305c  2**0
                  CONTENTS, READONLY
 12 .debug_info   000012c1  00000000  00000000  00003086  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00000563  00000000  00000000  00004347  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000190  00000000  00000000  000048b0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000118  00000000  00000000  00004a40  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0000324d  00000000  00000000  00004b58  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00001ee3  00000000  00000000  00007da5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0000aebf  00000000  00000000  00009c88  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  00014b47  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00000cec  00000000  00000000  00014b8c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000090  00000000  00000000  00015878  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	@ (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	@ (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	@ (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	2000005c 	.word	0x2000005c
 80001bc:	00000000 	.word	0x00000000
 80001c0:	08001928 	.word	0x08001928

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	@ (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	@ (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	@ (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000060 	.word	0x20000060
 80001dc:	08001928 	.word	0x08001928

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <delay>:


/*
 * creating software delay;
 * */
void delay(){
 8000280:	b480      	push	{r7}
 8000282:	b083      	sub	sp, #12
 8000284:	af00      	add	r7, sp, #0

	for (uint32_t i=0; i<500000; i++);
 8000286:	2300      	movs	r3, #0
 8000288:	607b      	str	r3, [r7, #4]
 800028a:	e002      	b.n	8000292 <delay+0x12>
 800028c:	687b      	ldr	r3, [r7, #4]
 800028e:	3301      	adds	r3, #1
 8000290:	607b      	str	r3, [r7, #4]
 8000292:	687b      	ldr	r3, [r7, #4]
 8000294:	4a04      	ldr	r2, [pc, #16]	@ (80002a8 <delay+0x28>)
 8000296:	4293      	cmp	r3, r2
 8000298:	d9f8      	bls.n	800028c <delay+0xc>
}
 800029a:	bf00      	nop
 800029c:	bf00      	nop
 800029e:	370c      	adds	r7, #12
 80002a0:	46bd      	mov	sp, r7
 80002a2:	bc80      	pop	{r7}
 80002a4:	4770      	bx	lr
 80002a6:	bf00      	nop
 80002a8:	0007a11f 	.word	0x0007a11f

080002ac <main>:


int main(){
 80002ac:	b580      	push	{r7, lr}
 80002ae:	b090      	sub	sp, #64	@ 0x40
 80002b0:	af00      	add	r7, sp, #0


	GPIO_handle_t gpio_handle_OrangeLED, gpio_handle_GreenLED, gpio_handle_RedLED, gpio_handle_BlueLED, gpioButton;

	memset(&gpioButton,0,sizeof(gpioButton));  //this initializes zero to all the members of structure to avoid garbage value
 80002b2:	463b      	mov	r3, r7
 80002b4:	220c      	movs	r2, #12
 80002b6:	2100      	movs	r1, #0
 80002b8:	4618      	mov	r0, r3
 80002ba:	f000 fce1 	bl	8000c80 <memset>
	memset(&gpio_handle_GreenLED, 0, sizeof(gpio_handle_GreenLED));  //this initializes zero to all the members of structure to avoid garbage value
 80002be:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80002c2:	220c      	movs	r2, #12
 80002c4:	2100      	movs	r1, #0
 80002c6:	4618      	mov	r0, r3
 80002c8:	f000 fcda 	bl	8000c80 <memset>


	//orange LED
	gpio_handle_OrangeLED.pGPIOx_baseAddr = GPIOD;
 80002cc:	4b3c      	ldr	r3, [pc, #240]	@ (80003c0 <main+0x114>)
 80002ce:	633b      	str	r3, [r7, #48]	@ 0x30

	gpio_handle_OrangeLED.GPIO_config.GPIO_mode = GPIO_MODE_OUT;
 80002d0:	2301      	movs	r3, #1
 80002d2:	f887 3035 	strb.w	r3, [r7, #53]	@ 0x35
	gpio_handle_OrangeLED.GPIO_config.GPIO_pin_number = GPIO_PIN_13;
 80002d6:	230d      	movs	r3, #13
 80002d8:	f887 3034 	strb.w	r3, [r7, #52]	@ 0x34
	gpio_handle_OrangeLED.GPIO_config.GPIO_output_type = GPIO_TYPE_PUSH_PULL;
 80002dc:	2300      	movs	r3, #0
 80002de:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
	gpio_handle_OrangeLED.GPIO_config.GPIO_pullup_pulldown = GPIO_PUPD_NOPULLUP_PULLDOWN;
 80002e2:	2300      	movs	r3, #0
 80002e4:	f887 3038 	strb.w	r3, [r7, #56]	@ 0x38
	gpio_handle_OrangeLED.GPIO_config.GPIO_speed = GPIO_SPEED_HIGH;
 80002e8:	2303      	movs	r3, #3
 80002ea:	f887 3036 	strb.w	r3, [r7, #54]	@ 0x36


	//Green LED
	gpio_handle_GreenLED.pGPIOx_baseAddr = GPIOD;
 80002ee:	4b34      	ldr	r3, [pc, #208]	@ (80003c0 <main+0x114>)
 80002f0:	627b      	str	r3, [r7, #36]	@ 0x24

	gpio_handle_GreenLED.GPIO_config.GPIO_mode = GPIO_MODE_OUT;
 80002f2:	2301      	movs	r3, #1
 80002f4:	f887 3029 	strb.w	r3, [r7, #41]	@ 0x29
	gpio_handle_GreenLED.GPIO_config.GPIO_pin_number = GPIO_PIN_12;
 80002f8:	230c      	movs	r3, #12
 80002fa:	f887 3028 	strb.w	r3, [r7, #40]	@ 0x28
	gpio_handle_GreenLED.GPIO_config.GPIO_output_type = GPIO_TYPE_PUSH_PULL;
 80002fe:	2300      	movs	r3, #0
 8000300:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
	gpio_handle_GreenLED.GPIO_config.GPIO_pullup_pulldown = GPIO_PUPD_NOPULLUP_PULLDOWN;
 8000304:	2300      	movs	r3, #0
 8000306:	f887 302c 	strb.w	r3, [r7, #44]	@ 0x2c
	gpio_handle_GreenLED.GPIO_config.GPIO_speed = GPIO_SPEED_HIGH;
 800030a:	2303      	movs	r3, #3
 800030c:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a


	//Red LED
	gpio_handle_RedLED.pGPIOx_baseAddr = GPIOD;
 8000310:	4b2b      	ldr	r3, [pc, #172]	@ (80003c0 <main+0x114>)
 8000312:	61bb      	str	r3, [r7, #24]

	gpio_handle_RedLED.GPIO_config.GPIO_mode = GPIO_MODE_OUT;
 8000314:	2301      	movs	r3, #1
 8000316:	777b      	strb	r3, [r7, #29]
	gpio_handle_RedLED.GPIO_config.GPIO_pin_number = GPIO_PIN_14;
 8000318:	230e      	movs	r3, #14
 800031a:	773b      	strb	r3, [r7, #28]
	gpio_handle_RedLED.GPIO_config.GPIO_output_type = GPIO_TYPE_PUSH_PULL;
 800031c:	2300      	movs	r3, #0
 800031e:	77fb      	strb	r3, [r7, #31]
	gpio_handle_RedLED.GPIO_config.GPIO_pullup_pulldown = GPIO_PUPD_NOPULLUP_PULLDOWN;
 8000320:	2300      	movs	r3, #0
 8000322:	f887 3020 	strb.w	r3, [r7, #32]
	gpio_handle_RedLED.GPIO_config.GPIO_speed = GPIO_SPEED_HIGH;
 8000326:	2303      	movs	r3, #3
 8000328:	77bb      	strb	r3, [r7, #30]


	//Blue LED
	gpio_handle_BlueLED.pGPIOx_baseAddr = GPIOD;
 800032a:	4b25      	ldr	r3, [pc, #148]	@ (80003c0 <main+0x114>)
 800032c:	60fb      	str	r3, [r7, #12]

	gpio_handle_BlueLED.GPIO_config.GPIO_mode = GPIO_MODE_OUT;
 800032e:	2301      	movs	r3, #1
 8000330:	747b      	strb	r3, [r7, #17]
	gpio_handle_BlueLED.GPIO_config.GPIO_pin_number = GPIO_PIN_15;
 8000332:	230f      	movs	r3, #15
 8000334:	743b      	strb	r3, [r7, #16]
	gpio_handle_BlueLED.GPIO_config.GPIO_output_type = GPIO_TYPE_PUSH_PULL;
 8000336:	2300      	movs	r3, #0
 8000338:	74fb      	strb	r3, [r7, #19]
	gpio_handle_BlueLED.GPIO_config.GPIO_pullup_pulldown = GPIO_PUPD_NOPULLUP_PULLDOWN;
 800033a:	2300      	movs	r3, #0
 800033c:	753b      	strb	r3, [r7, #20]
	gpio_handle_BlueLED.GPIO_config.GPIO_speed = GPIO_SPEED_HIGH;
 800033e:	2303      	movs	r3, #3
 8000340:	74bb      	strb	r3, [r7, #18]
//	gpioButton.GPIO_config.GPIO_pullup_pulldown = GPIO_PUPD_NOPULLUP_PULLDOWN;
//	gpioButton.GPIO_config.GPIO_speed = GPIO_SPEED_HIGH;
//

	//Button (for INTERRUPT)
	gpioButton.pGPIOx_baseAddr = GPIOA;
 8000342:	4b20      	ldr	r3, [pc, #128]	@ (80003c4 <main+0x118>)
 8000344:	603b      	str	r3, [r7, #0]

	gpioButton.GPIO_config.GPIO_mode = GPIO_MODE_IT_RT;    //The moe is neither OUTPUT nor INPUT instead it will be either RISING/Failing or both trigger if to get the Interrupt
 8000346:	2304      	movs	r3, #4
 8000348:	717b      	strb	r3, [r7, #5]
	gpioButton.GPIO_config.GPIO_pin_number = GPIO_PIN_0;
 800034a:	2300      	movs	r3, #0
 800034c:	713b      	strb	r3, [r7, #4]
	gpioButton.GPIO_config.GPIO_pullup_pulldown = GPIO_PUPD_NOPULLUP_PULLDOWN;
 800034e:	2300      	movs	r3, #0
 8000350:	723b      	strb	r3, [r7, #8]
	gpioButton.GPIO_config.GPIO_speed = GPIO_SPEED_HIGH;
 8000352:	2303      	movs	r3, #3
 8000354:	71bb      	strb	r3, [r7, #6]


	// RCC_clock enable:
	GPIO_PeriCLKControl(GPIOD, ENABLE);  //CLK ENABLE PORT D
 8000356:	2100      	movs	r1, #0
 8000358:	4819      	ldr	r0, [pc, #100]	@ (80003c0 <main+0x114>)
 800035a:	f000 fa45 	bl	80007e8 <GPIO_PeriCLKControl>

	GPIO_PeriCLKControl(GPIOA, ENABLE);	 //CLK ENABLE PORT A
 800035e:	2100      	movs	r1, #0
 8000360:	4818      	ldr	r0, [pc, #96]	@ (80003c4 <main+0x118>)
 8000362:	f000 fa41 	bl	80007e8 <GPIO_PeriCLKControl>



	//INTIALIZE GPIOs;(to initial all the GPIO config registers)
	GPIO_init(&gpio_handle_OrangeLED);
 8000366:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 800036a:	4618      	mov	r0, r3
 800036c:	f000 f92e 	bl	80005cc <GPIO_init>

	GPIO_init(&gpio_handle_GreenLED);
 8000370:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000374:	4618      	mov	r0, r3
 8000376:	f000 f929 	bl	80005cc <GPIO_init>

	GPIO_init(&gpio_handle_RedLED);
 800037a:	f107 0318 	add.w	r3, r7, #24
 800037e:	4618      	mov	r0, r3
 8000380:	f000 f924 	bl	80005cc <GPIO_init>

	GPIO_init(&gpio_handle_BlueLED);
 8000384:	f107 030c 	add.w	r3, r7, #12
 8000388:	4618      	mov	r0, r3
 800038a:	f000 f91f 	bl	80005cc <GPIO_init>

	GPIO_init(&gpioButton);
 800038e:	463b      	mov	r3, r7
 8000390:	4618      	mov	r0, r3
 8000392:	f000 f91b 	bl	80005cc <GPIO_init>


	//For button we have at pin-0 at port-A; so for interrupt we choose to EXTI line 0.
	GPIO_IRQConfig(IRQ_NO_EXTI0, NVIC_PRI_NO_EXTI0, ENABLE);
 8000396:	2200      	movs	r2, #0
 8000398:	210d      	movs	r1, #13
 800039a:	2006      	movs	r0, #6
 800039c:	f000 fad8 	bl	8000950 <GPIO_IRQConfig>



	uint8_t count=0;
 80003a0:	2300      	movs	r3, #0
 80003a2:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f


	//infinite loop
	while (1){

		count = count + 1;
 80003a6:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 80003aa:	3301      	adds	r3, #1
 80003ac:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
		printf("my counter: %d", count);
 80003b0:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 80003b4:	4619      	mov	r1, r3
 80003b6:	4804      	ldr	r0, [pc, #16]	@ (80003c8 <main+0x11c>)
 80003b8:	f000 fc50 	bl	8000c5c <iprintf>
		count = count + 1;
 80003bc:	bf00      	nop
 80003be:	e7f2      	b.n	80003a6 <main+0xfa>
 80003c0:	40020c00 	.word	0x40020c00
 80003c4:	40020000 	.word	0x40020000
 80003c8:	08001940 	.word	0x08001940

080003cc <EXTI0_IRQHandler>:


// So, when the button pressed interrupt rises, then this handler run and blink LED
// symboling INTERRUPT rise.

void EXTI0_IRQHandler(void){
 80003cc:	b580      	push	{r7, lr}
 80003ce:	af00      	add	r7, sp, #0

	delay();//due to debouncing button led is not bliking properly so introduce delay
 80003d0:	f7ff ff56 	bl	8000280 <delay>

	GPIO_IRQHandling(GPIO_PIN_0);
 80003d4:	2000      	movs	r0, #0
 80003d6:	f000 fb5f 	bl	8000a98 <GPIO_IRQHandling>
	GPIO_ToggleOutputPin(GPIOD, GPIO_PIN_12);
 80003da:	210c      	movs	r1, #12
 80003dc:	4802      	ldr	r0, [pc, #8]	@ (80003e8 <EXTI0_IRQHandler+0x1c>)
 80003de:	f000 faa3 	bl	8000928 <GPIO_ToggleOutputPin>
}
 80003e2:	bf00      	nop
 80003e4:	bd80      	pop	{r7, pc}
 80003e6:	bf00      	nop
 80003e8:	40020c00 	.word	0x40020c00

080003ec <ITM_SendChar>:
/* ITM register addresses */
#define ITM_STIMULUS_PORT0   	*((volatile uint32_t*) 0xE0000000 )
#define ITM_TRACE_EN          	*((volatile uint32_t*) 0xE0000E00 )

void ITM_SendChar(uint8_t ch)
{
 80003ec:	b480      	push	{r7}
 80003ee:	b083      	sub	sp, #12
 80003f0:	af00      	add	r7, sp, #0
 80003f2:	4603      	mov	r3, r0
 80003f4:	71fb      	strb	r3, [r7, #7]

	//Enable TRCENA
	DEMCR |= ( 1 << 24);
 80003f6:	4b0e      	ldr	r3, [pc, #56]	@ (8000430 <ITM_SendChar+0x44>)
 80003f8:	681b      	ldr	r3, [r3, #0]
 80003fa:	4a0d      	ldr	r2, [pc, #52]	@ (8000430 <ITM_SendChar+0x44>)
 80003fc:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8000400:	6013      	str	r3, [r2, #0]

	//enable stimulus port 0
	ITM_TRACE_EN |= ( 1 << 0);
 8000402:	4b0c      	ldr	r3, [pc, #48]	@ (8000434 <ITM_SendChar+0x48>)
 8000404:	681b      	ldr	r3, [r3, #0]
 8000406:	4a0b      	ldr	r2, [pc, #44]	@ (8000434 <ITM_SendChar+0x48>)
 8000408:	f043 0301 	orr.w	r3, r3, #1
 800040c:	6013      	str	r3, [r2, #0]

	// read FIFO status in bit [0]:
	while(!(ITM_STIMULUS_PORT0 & 1));
 800040e:	bf00      	nop
 8000410:	f04f 4360 	mov.w	r3, #3758096384	@ 0xe0000000
 8000414:	681b      	ldr	r3, [r3, #0]
 8000416:	f003 0301 	and.w	r3, r3, #1
 800041a:	2b00      	cmp	r3, #0
 800041c:	d0f8      	beq.n	8000410 <ITM_SendChar+0x24>

	//Write to ITM stimulus port0
	ITM_STIMULUS_PORT0 = ch;
 800041e:	f04f 4260 	mov.w	r2, #3758096384	@ 0xe0000000
 8000422:	79fb      	ldrb	r3, [r7, #7]
 8000424:	6013      	str	r3, [r2, #0]
}
 8000426:	bf00      	nop
 8000428:	370c      	adds	r7, #12
 800042a:	46bd      	mov	sp, r7
 800042c:	bc80      	pop	{r7}
 800042e:	4770      	bx	lr
 8000430:	e000edfc 	.word	0xe000edfc
 8000434:	e0000e00 	.word	0xe0000e00

08000438 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000438:	b580      	push	{r7, lr}
 800043a:	b086      	sub	sp, #24
 800043c:	af00      	add	r7, sp, #0
 800043e:	60f8      	str	r0, [r7, #12]
 8000440:	60b9      	str	r1, [r7, #8]
 8000442:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000444:	2300      	movs	r3, #0
 8000446:	617b      	str	r3, [r7, #20]
 8000448:	e00a      	b.n	8000460 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 800044a:	f3af 8000 	nop.w
 800044e:	4601      	mov	r1, r0
 8000450:	68bb      	ldr	r3, [r7, #8]
 8000452:	1c5a      	adds	r2, r3, #1
 8000454:	60ba      	str	r2, [r7, #8]
 8000456:	b2ca      	uxtb	r2, r1
 8000458:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800045a:	697b      	ldr	r3, [r7, #20]
 800045c:	3301      	adds	r3, #1
 800045e:	617b      	str	r3, [r7, #20]
 8000460:	697a      	ldr	r2, [r7, #20]
 8000462:	687b      	ldr	r3, [r7, #4]
 8000464:	429a      	cmp	r2, r3
 8000466:	dbf0      	blt.n	800044a <_read+0x12>
  }

  return len;
 8000468:	687b      	ldr	r3, [r7, #4]
}
 800046a:	4618      	mov	r0, r3
 800046c:	3718      	adds	r7, #24
 800046e:	46bd      	mov	sp, r7
 8000470:	bd80      	pop	{r7, pc}

08000472 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8000472:	b580      	push	{r7, lr}
 8000474:	b086      	sub	sp, #24
 8000476:	af00      	add	r7, sp, #0
 8000478:	60f8      	str	r0, [r7, #12]
 800047a:	60b9      	str	r1, [r7, #8]
 800047c:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800047e:	2300      	movs	r3, #0
 8000480:	617b      	str	r3, [r7, #20]
 8000482:	e009      	b.n	8000498 <_write+0x26>
  {
//    __io_putchar(*ptr++);

    ITM_SendChar(*ptr++);
 8000484:	68bb      	ldr	r3, [r7, #8]
 8000486:	1c5a      	adds	r2, r3, #1
 8000488:	60ba      	str	r2, [r7, #8]
 800048a:	781b      	ldrb	r3, [r3, #0]
 800048c:	4618      	mov	r0, r3
 800048e:	f7ff ffad 	bl	80003ec <ITM_SendChar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000492:	697b      	ldr	r3, [r7, #20]
 8000494:	3301      	adds	r3, #1
 8000496:	617b      	str	r3, [r7, #20]
 8000498:	697a      	ldr	r2, [r7, #20]
 800049a:	687b      	ldr	r3, [r7, #4]
 800049c:	429a      	cmp	r2, r3
 800049e:	dbf1      	blt.n	8000484 <_write+0x12>
  }
  return len;
 80004a0:	687b      	ldr	r3, [r7, #4]
}
 80004a2:	4618      	mov	r0, r3
 80004a4:	3718      	adds	r7, #24
 80004a6:	46bd      	mov	sp, r7
 80004a8:	bd80      	pop	{r7, pc}

080004aa <_close>:

int _close(int file)
{
 80004aa:	b480      	push	{r7}
 80004ac:	b083      	sub	sp, #12
 80004ae:	af00      	add	r7, sp, #0
 80004b0:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 80004b2:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
}
 80004b6:	4618      	mov	r0, r3
 80004b8:	370c      	adds	r7, #12
 80004ba:	46bd      	mov	sp, r7
 80004bc:	bc80      	pop	{r7}
 80004be:	4770      	bx	lr

080004c0 <_fstat>:


int _fstat(int file, struct stat *st)
{
 80004c0:	b480      	push	{r7}
 80004c2:	b083      	sub	sp, #12
 80004c4:	af00      	add	r7, sp, #0
 80004c6:	6078      	str	r0, [r7, #4]
 80004c8:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 80004ca:	683b      	ldr	r3, [r7, #0]
 80004cc:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 80004d0:	605a      	str	r2, [r3, #4]
  return 0;
 80004d2:	2300      	movs	r3, #0
}
 80004d4:	4618      	mov	r0, r3
 80004d6:	370c      	adds	r7, #12
 80004d8:	46bd      	mov	sp, r7
 80004da:	bc80      	pop	{r7}
 80004dc:	4770      	bx	lr

080004de <_isatty>:

int _isatty(int file)
{
 80004de:	b480      	push	{r7}
 80004e0:	b083      	sub	sp, #12
 80004e2:	af00      	add	r7, sp, #0
 80004e4:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 80004e6:	2301      	movs	r3, #1
}
 80004e8:	4618      	mov	r0, r3
 80004ea:	370c      	adds	r7, #12
 80004ec:	46bd      	mov	sp, r7
 80004ee:	bc80      	pop	{r7}
 80004f0:	4770      	bx	lr

080004f2 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80004f2:	b480      	push	{r7}
 80004f4:	b085      	sub	sp, #20
 80004f6:	af00      	add	r7, sp, #0
 80004f8:	60f8      	str	r0, [r7, #12]
 80004fa:	60b9      	str	r1, [r7, #8]
 80004fc:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 80004fe:	2300      	movs	r3, #0
}
 8000500:	4618      	mov	r0, r3
 8000502:	3714      	adds	r7, #20
 8000504:	46bd      	mov	sp, r7
 8000506:	bc80      	pop	{r7}
 8000508:	4770      	bx	lr
	...

0800050c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800050c:	b580      	push	{r7, lr}
 800050e:	b086      	sub	sp, #24
 8000510:	af00      	add	r7, sp, #0
 8000512:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000514:	4a14      	ldr	r2, [pc, #80]	@ (8000568 <_sbrk+0x5c>)
 8000516:	4b15      	ldr	r3, [pc, #84]	@ (800056c <_sbrk+0x60>)
 8000518:	1ad3      	subs	r3, r2, r3
 800051a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800051c:	697b      	ldr	r3, [r7, #20]
 800051e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000520:	4b13      	ldr	r3, [pc, #76]	@ (8000570 <_sbrk+0x64>)
 8000522:	681b      	ldr	r3, [r3, #0]
 8000524:	2b00      	cmp	r3, #0
 8000526:	d102      	bne.n	800052e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000528:	4b11      	ldr	r3, [pc, #68]	@ (8000570 <_sbrk+0x64>)
 800052a:	4a12      	ldr	r2, [pc, #72]	@ (8000574 <_sbrk+0x68>)
 800052c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800052e:	4b10      	ldr	r3, [pc, #64]	@ (8000570 <_sbrk+0x64>)
 8000530:	681a      	ldr	r2, [r3, #0]
 8000532:	687b      	ldr	r3, [r7, #4]
 8000534:	4413      	add	r3, r2
 8000536:	693a      	ldr	r2, [r7, #16]
 8000538:	429a      	cmp	r2, r3
 800053a:	d207      	bcs.n	800054c <_sbrk+0x40>
  {
    errno = ENOMEM;
 800053c:	f000 fba8 	bl	8000c90 <__errno>
 8000540:	4603      	mov	r3, r0
 8000542:	220c      	movs	r2, #12
 8000544:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000546:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800054a:	e009      	b.n	8000560 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800054c:	4b08      	ldr	r3, [pc, #32]	@ (8000570 <_sbrk+0x64>)
 800054e:	681b      	ldr	r3, [r3, #0]
 8000550:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000552:	4b07      	ldr	r3, [pc, #28]	@ (8000570 <_sbrk+0x64>)
 8000554:	681a      	ldr	r2, [r3, #0]
 8000556:	687b      	ldr	r3, [r7, #4]
 8000558:	4413      	add	r3, r2
 800055a:	4a05      	ldr	r2, [pc, #20]	@ (8000570 <_sbrk+0x64>)
 800055c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800055e:	68fb      	ldr	r3, [r7, #12]
}
 8000560:	4618      	mov	r0, r3
 8000562:	3718      	adds	r7, #24
 8000564:	46bd      	mov	sp, r7
 8000566:	bd80      	pop	{r7, pc}
 8000568:	20020000 	.word	0x20020000
 800056c:	00000400 	.word	0x00000400
 8000570:	20000078 	.word	0x20000078
 8000574:	200001c8 	.word	0x200001c8

08000578 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000578:	480d      	ldr	r0, [pc, #52]	@ (80005b0 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 800057a:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 800057c:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000580:	480c      	ldr	r0, [pc, #48]	@ (80005b4 <LoopForever+0x6>)
  ldr r1, =_edata
 8000582:	490d      	ldr	r1, [pc, #52]	@ (80005b8 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000584:	4a0d      	ldr	r2, [pc, #52]	@ (80005bc <LoopForever+0xe>)
  movs r3, #0
 8000586:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000588:	e002      	b.n	8000590 <LoopCopyDataInit>

0800058a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800058a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800058c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800058e:	3304      	adds	r3, #4

08000590 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000590:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000592:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000594:	d3f9      	bcc.n	800058a <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000596:	4a0a      	ldr	r2, [pc, #40]	@ (80005c0 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000598:	4c0a      	ldr	r4, [pc, #40]	@ (80005c4 <LoopForever+0x16>)
  movs r3, #0
 800059a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800059c:	e001      	b.n	80005a2 <LoopFillZerobss>

0800059e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800059e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80005a0:	3204      	adds	r2, #4

080005a2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80005a2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80005a4:	d3fb      	bcc.n	800059e <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 80005a6:	f000 fb79 	bl	8000c9c <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80005aa:	f7ff fe7f 	bl	80002ac <main>

080005ae <LoopForever>:

LoopForever:
  b LoopForever
 80005ae:	e7fe      	b.n	80005ae <LoopForever>
  ldr   r0, =_estack
 80005b0:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80005b4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80005b8:	2000005c 	.word	0x2000005c
  ldr r2, =_sidata
 80005bc:	08001994 	.word	0x08001994
  ldr r2, =_sbss
 80005c0:	2000005c 	.word	0x2000005c
  ldr r4, =_ebss
 80005c4:	200001c8 	.word	0x200001c8

080005c8 <ADC_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80005c8:	e7fe      	b.n	80005c8 <ADC_IRQHandler>
	...

080005cc <GPIO_init>:
 *
 * @note			- none
 *
 * */

void GPIO_init(GPIO_handle_t *pGPIOHandle){
 80005cc:	b480      	push	{r7}
 80005ce:	b085      	sub	sp, #20
 80005d0:	af00      	add	r7, sp, #0
 80005d2:	6078      	str	r0, [r7, #4]

	uint32_t temp = 0;
 80005d4:	2300      	movs	r3, #0
 80005d6:	60fb      	str	r3, [r7, #12]


	//TODO: 1.Initialize the GPIO MODER register
	if (pGPIOHandle->GPIO_config.GPIO_mode <= GPIO_MODE_ANLG){
 80005d8:	687b      	ldr	r3, [r7, #4]
 80005da:	795b      	ldrb	r3, [r3, #5]
 80005dc:	2b03      	cmp	r3, #3
 80005de:	d811      	bhi.n	8000604 <GPIO_init+0x38>

		temp = (pGPIOHandle->GPIO_config.GPIO_mode << (2 * pGPIOHandle->GPIO_config.GPIO_pin_number) );  // 2* pin_number -> because moder register has 2 bits for each pins, therefore if I want to set pin 2 then left shift it 2*2 = 4th bit position of MODER register.
 80005e0:	687b      	ldr	r3, [r7, #4]
 80005e2:	795b      	ldrb	r3, [r3, #5]
 80005e4:	461a      	mov	r2, r3
 80005e6:	687b      	ldr	r3, [r7, #4]
 80005e8:	791b      	ldrb	r3, [r3, #4]
 80005ea:	005b      	lsls	r3, r3, #1
 80005ec:	fa02 f303 	lsl.w	r3, r2, r3
 80005f0:	60fb      	str	r3, [r7, #12]
		pGPIOHandle->pGPIOx_baseAddr->MODER |= temp;  //use bitwise OR (|=) not assignment (=) ---> because if we use assignment(=) then it will affect other bit position, so to avoid that we should use bitwise OR.
 80005f2:	687b      	ldr	r3, [r7, #4]
 80005f4:	681b      	ldr	r3, [r3, #0]
 80005f6:	6819      	ldr	r1, [r3, #0]
 80005f8:	687b      	ldr	r3, [r7, #4]
 80005fa:	681b      	ldr	r3, [r3, #0]
 80005fc:	68fa      	ldr	r2, [r7, #12]
 80005fe:	430a      	orrs	r2, r1
 8000600:	601a      	str	r2, [r3, #0]
 8000602:	e0a1      	b.n	8000748 <GPIO_init+0x17c>




		//RISING TRIGGER (clear FAILING TRIGGER if any)
		if (pGPIOHandle->GPIO_config.GPIO_mode == GPIO_MODE_IT_RT){
 8000604:	687b      	ldr	r3, [r7, #4]
 8000606:	795b      	ldrb	r3, [r3, #5]
 8000608:	2b04      	cmp	r3, #4
 800060a:	d117      	bne.n	800063c <GPIO_init+0x70>
			EXTI->RTSR |= 1 << pGPIOHandle->GPIO_config.GPIO_pin_number; //SETTING
 800060c:	4b6d      	ldr	r3, [pc, #436]	@ (80007c4 <GPIO_init+0x1f8>)
 800060e:	689b      	ldr	r3, [r3, #8]
 8000610:	687a      	ldr	r2, [r7, #4]
 8000612:	7912      	ldrb	r2, [r2, #4]
 8000614:	4611      	mov	r1, r2
 8000616:	2201      	movs	r2, #1
 8000618:	408a      	lsls	r2, r1
 800061a:	4611      	mov	r1, r2
 800061c:	4a69      	ldr	r2, [pc, #420]	@ (80007c4 <GPIO_init+0x1f8>)
 800061e:	430b      	orrs	r3, r1
 8000620:	6093      	str	r3, [r2, #8]
			EXTI->FTSR &= ~(1 << pGPIOHandle->GPIO_config.GPIO_pin_number); //CLEARING
 8000622:	4b68      	ldr	r3, [pc, #416]	@ (80007c4 <GPIO_init+0x1f8>)
 8000624:	68db      	ldr	r3, [r3, #12]
 8000626:	687a      	ldr	r2, [r7, #4]
 8000628:	7912      	ldrb	r2, [r2, #4]
 800062a:	4611      	mov	r1, r2
 800062c:	2201      	movs	r2, #1
 800062e:	408a      	lsls	r2, r1
 8000630:	43d2      	mvns	r2, r2
 8000632:	4611      	mov	r1, r2
 8000634:	4a63      	ldr	r2, [pc, #396]	@ (80007c4 <GPIO_init+0x1f8>)
 8000636:	400b      	ands	r3, r1
 8000638:	60d3      	str	r3, [r2, #12]
 800063a:	e035      	b.n	80006a8 <GPIO_init+0xdc>
		}

		//FALLING TRIGGER (clear RISING TRIGGER if any)
		else if(pGPIOHandle->GPIO_config.GPIO_mode == GPIO_MODE_IT_FT){
 800063c:	687b      	ldr	r3, [r7, #4]
 800063e:	795b      	ldrb	r3, [r3, #5]
 8000640:	2b05      	cmp	r3, #5
 8000642:	d117      	bne.n	8000674 <GPIO_init+0xa8>
			EXTI->FTSR |= 1 << pGPIOHandle->GPIO_config.GPIO_pin_number; //SETTING
 8000644:	4b5f      	ldr	r3, [pc, #380]	@ (80007c4 <GPIO_init+0x1f8>)
 8000646:	68db      	ldr	r3, [r3, #12]
 8000648:	687a      	ldr	r2, [r7, #4]
 800064a:	7912      	ldrb	r2, [r2, #4]
 800064c:	4611      	mov	r1, r2
 800064e:	2201      	movs	r2, #1
 8000650:	408a      	lsls	r2, r1
 8000652:	4611      	mov	r1, r2
 8000654:	4a5b      	ldr	r2, [pc, #364]	@ (80007c4 <GPIO_init+0x1f8>)
 8000656:	430b      	orrs	r3, r1
 8000658:	60d3      	str	r3, [r2, #12]
			EXTI->RTSR &= ~(1 << pGPIOHandle->GPIO_config.GPIO_pin_number); //CLEARING
 800065a:	4b5a      	ldr	r3, [pc, #360]	@ (80007c4 <GPIO_init+0x1f8>)
 800065c:	689b      	ldr	r3, [r3, #8]
 800065e:	687a      	ldr	r2, [r7, #4]
 8000660:	7912      	ldrb	r2, [r2, #4]
 8000662:	4611      	mov	r1, r2
 8000664:	2201      	movs	r2, #1
 8000666:	408a      	lsls	r2, r1
 8000668:	43d2      	mvns	r2, r2
 800066a:	4611      	mov	r1, r2
 800066c:	4a55      	ldr	r2, [pc, #340]	@ (80007c4 <GPIO_init+0x1f8>)
 800066e:	400b      	ands	r3, r1
 8000670:	6093      	str	r3, [r2, #8]
 8000672:	e019      	b.n	80006a8 <GPIO_init+0xdc>
		}

		//RISING & FAILING TRIGGER
		else if(pGPIOHandle->GPIO_config.GPIO_mode == GPIO_MODE_IT_RFT){
 8000674:	687b      	ldr	r3, [r7, #4]
 8000676:	795b      	ldrb	r3, [r3, #5]
 8000678:	2b06      	cmp	r3, #6
 800067a:	d115      	bne.n	80006a8 <GPIO_init+0xdc>
			EXTI->RTSR |= 1 << pGPIOHandle->GPIO_config.GPIO_pin_number; //SETTING
 800067c:	4b51      	ldr	r3, [pc, #324]	@ (80007c4 <GPIO_init+0x1f8>)
 800067e:	689b      	ldr	r3, [r3, #8]
 8000680:	687a      	ldr	r2, [r7, #4]
 8000682:	7912      	ldrb	r2, [r2, #4]
 8000684:	4611      	mov	r1, r2
 8000686:	2201      	movs	r2, #1
 8000688:	408a      	lsls	r2, r1
 800068a:	4611      	mov	r1, r2
 800068c:	4a4d      	ldr	r2, [pc, #308]	@ (80007c4 <GPIO_init+0x1f8>)
 800068e:	430b      	orrs	r3, r1
 8000690:	6093      	str	r3, [r2, #8]
			EXTI->FTSR |= 1 << pGPIOHandle->GPIO_config.GPIO_pin_number; //SETTING
 8000692:	4b4c      	ldr	r3, [pc, #304]	@ (80007c4 <GPIO_init+0x1f8>)
 8000694:	68db      	ldr	r3, [r3, #12]
 8000696:	687a      	ldr	r2, [r7, #4]
 8000698:	7912      	ldrb	r2, [r2, #4]
 800069a:	4611      	mov	r1, r2
 800069c:	2201      	movs	r2, #1
 800069e:	408a      	lsls	r2, r1
 80006a0:	4611      	mov	r1, r2
 80006a2:	4a48      	ldr	r2, [pc, #288]	@ (80007c4 <GPIO_init+0x1f8>)
 80006a4:	430b      	orrs	r3, r1
 80006a6:	60d3      	str	r3, [r2, #12]
		}


		//2. Configure GPIO Port selection on EXTIx line through SYSCFG_EXTICR.
		uint8_t temp1 = pGPIOHandle->GPIO_config.GPIO_pin_number/4;
 80006a8:	687b      	ldr	r3, [r7, #4]
 80006aa:	791b      	ldrb	r3, [r3, #4]
 80006ac:	089b      	lsrs	r3, r3, #2
 80006ae:	72fb      	strb	r3, [r7, #11]
		uint8_t temp2 = pGPIOHandle->GPIO_config.GPIO_pin_number%4;
 80006b0:	687b      	ldr	r3, [r7, #4]
 80006b2:	791b      	ldrb	r3, [r3, #4]
 80006b4:	f003 0303 	and.w	r3, r3, #3
 80006b8:	72bb      	strb	r3, [r7, #10]
		uint8_t portcode = GPIO_BASEADDR_TO_CODE(pGPIOHandle->pGPIOx_baseAddr);
 80006ba:	687b      	ldr	r3, [r7, #4]
 80006bc:	681b      	ldr	r3, [r3, #0]
 80006be:	4a42      	ldr	r2, [pc, #264]	@ (80007c8 <GPIO_init+0x1fc>)
 80006c0:	4293      	cmp	r3, r2
 80006c2:	d024      	beq.n	800070e <GPIO_init+0x142>
 80006c4:	687b      	ldr	r3, [r7, #4]
 80006c6:	681b      	ldr	r3, [r3, #0]
 80006c8:	4a40      	ldr	r2, [pc, #256]	@ (80007cc <GPIO_init+0x200>)
 80006ca:	4293      	cmp	r3, r2
 80006cc:	d01d      	beq.n	800070a <GPIO_init+0x13e>
 80006ce:	687b      	ldr	r3, [r7, #4]
 80006d0:	681b      	ldr	r3, [r3, #0]
 80006d2:	4a3f      	ldr	r2, [pc, #252]	@ (80007d0 <GPIO_init+0x204>)
 80006d4:	4293      	cmp	r3, r2
 80006d6:	d016      	beq.n	8000706 <GPIO_init+0x13a>
 80006d8:	687b      	ldr	r3, [r7, #4]
 80006da:	681b      	ldr	r3, [r3, #0]
 80006dc:	4a3d      	ldr	r2, [pc, #244]	@ (80007d4 <GPIO_init+0x208>)
 80006de:	4293      	cmp	r3, r2
 80006e0:	d00f      	beq.n	8000702 <GPIO_init+0x136>
 80006e2:	687b      	ldr	r3, [r7, #4]
 80006e4:	681b      	ldr	r3, [r3, #0]
 80006e6:	4a3c      	ldr	r2, [pc, #240]	@ (80007d8 <GPIO_init+0x20c>)
 80006e8:	4293      	cmp	r3, r2
 80006ea:	d008      	beq.n	80006fe <GPIO_init+0x132>
 80006ec:	687b      	ldr	r3, [r7, #4]
 80006ee:	681b      	ldr	r3, [r3, #0]
 80006f0:	4a3a      	ldr	r2, [pc, #232]	@ (80007dc <GPIO_init+0x210>)
 80006f2:	4293      	cmp	r3, r2
 80006f4:	d101      	bne.n	80006fa <GPIO_init+0x12e>
 80006f6:	2306      	movs	r3, #6
 80006f8:	e00a      	b.n	8000710 <GPIO_init+0x144>
 80006fa:	2300      	movs	r3, #0
 80006fc:	e008      	b.n	8000710 <GPIO_init+0x144>
 80006fe:	2305      	movs	r3, #5
 8000700:	e006      	b.n	8000710 <GPIO_init+0x144>
 8000702:	2303      	movs	r3, #3
 8000704:	e004      	b.n	8000710 <GPIO_init+0x144>
 8000706:	2302      	movs	r3, #2
 8000708:	e002      	b.n	8000710 <GPIO_init+0x144>
 800070a:	2301      	movs	r3, #1
 800070c:	e000      	b.n	8000710 <GPIO_init+0x144>
 800070e:	2300      	movs	r3, #0
 8000710:	727b      	strb	r3, [r7, #9]
		SYSCFG_CLK_EN();
 8000712:	4b33      	ldr	r3, [pc, #204]	@ (80007e0 <GPIO_init+0x214>)
 8000714:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000716:	4a32      	ldr	r2, [pc, #200]	@ (80007e0 <GPIO_init+0x214>)
 8000718:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800071c:	6453      	str	r3, [r2, #68]	@ 0x44
		SYSCFG->EXTICR[temp1] = portcode << (temp2 * 4);
 800071e:	7a7a      	ldrb	r2, [r7, #9]
 8000720:	7abb      	ldrb	r3, [r7, #10]
 8000722:	009b      	lsls	r3, r3, #2
 8000724:	fa02 f103 	lsl.w	r1, r2, r3
 8000728:	4a2e      	ldr	r2, [pc, #184]	@ (80007e4 <GPIO_init+0x218>)
 800072a:	7afb      	ldrb	r3, [r7, #11]
 800072c:	3302      	adds	r3, #2
 800072e:	f842 1023 	str.w	r1, [r2, r3, lsl #2]



		//3. Enable EXTI interrupt Delivery using IMR(Interrupt Masking Register)
		EXTI->IMR |= 1 << pGPIOHandle->GPIO_config.GPIO_pin_number;
 8000732:	4b24      	ldr	r3, [pc, #144]	@ (80007c4 <GPIO_init+0x1f8>)
 8000734:	681b      	ldr	r3, [r3, #0]
 8000736:	687a      	ldr	r2, [r7, #4]
 8000738:	7912      	ldrb	r2, [r2, #4]
 800073a:	4611      	mov	r1, r2
 800073c:	2201      	movs	r2, #1
 800073e:	408a      	lsls	r2, r1
 8000740:	4611      	mov	r1, r2
 8000742:	4a20      	ldr	r2, [pc, #128]	@ (80007c4 <GPIO_init+0x1f8>)
 8000744:	430b      	orrs	r3, r1
 8000746:	6013      	str	r3, [r2, #0]
	//TODO:2. Input Mode -> Nothing to initialize for Input Mode, just directly implement the function.



	//TODO:3. initialize the OUTPUT TYPE REG
	temp = 0;
 8000748:	2300      	movs	r3, #0
 800074a:	60fb      	str	r3, [r7, #12]
	temp = pGPIOHandle->GPIO_config.GPIO_output_type << pGPIOHandle->GPIO_config.GPIO_pin_number;
 800074c:	687b      	ldr	r3, [r7, #4]
 800074e:	79db      	ldrb	r3, [r3, #7]
 8000750:	461a      	mov	r2, r3
 8000752:	687b      	ldr	r3, [r7, #4]
 8000754:	791b      	ldrb	r3, [r3, #4]
 8000756:	fa02 f303 	lsl.w	r3, r2, r3
 800075a:	60fb      	str	r3, [r7, #12]
	pGPIOHandle->pGPIOx_baseAddr->OTYPER |= temp;
 800075c:	687b      	ldr	r3, [r7, #4]
 800075e:	681b      	ldr	r3, [r3, #0]
 8000760:	6859      	ldr	r1, [r3, #4]
 8000762:	687b      	ldr	r3, [r7, #4]
 8000764:	681b      	ldr	r3, [r3, #0]
 8000766:	68fa      	ldr	r2, [r7, #12]
 8000768:	430a      	orrs	r2, r1
 800076a:	605a      	str	r2, [r3, #4]



	//TODO:4. initialize the SPEED REG
	temp = 0;
 800076c:	2300      	movs	r3, #0
 800076e:	60fb      	str	r3, [r7, #12]
	temp = pGPIOHandle->GPIO_config.GPIO_speed << (2 * pGPIOHandle->GPIO_config.GPIO_pin_number);  // 2* pin_number -> because speed register also has 2 bits for each pins, therefore if I want to set pin 2 then left shift it 2*2 = 4th bit position of SPEED register.
 8000770:	687b      	ldr	r3, [r7, #4]
 8000772:	799b      	ldrb	r3, [r3, #6]
 8000774:	461a      	mov	r2, r3
 8000776:	687b      	ldr	r3, [r7, #4]
 8000778:	791b      	ldrb	r3, [r3, #4]
 800077a:	005b      	lsls	r3, r3, #1
 800077c:	fa02 f303 	lsl.w	r3, r2, r3
 8000780:	60fb      	str	r3, [r7, #12]
	pGPIOHandle->pGPIOx_baseAddr->OSPEEDR |= temp;
 8000782:	687b      	ldr	r3, [r7, #4]
 8000784:	681b      	ldr	r3, [r3, #0]
 8000786:	6899      	ldr	r1, [r3, #8]
 8000788:	687b      	ldr	r3, [r7, #4]
 800078a:	681b      	ldr	r3, [r3, #0]
 800078c:	68fa      	ldr	r2, [r7, #12]
 800078e:	430a      	orrs	r2, r1
 8000790:	609a      	str	r2, [r3, #8]



	//TODO:5. initialize the PULLUP/PULLDOWN REG
	temp = 0;
 8000792:	2300      	movs	r3, #0
 8000794:	60fb      	str	r3, [r7, #12]
	temp = pGPIOHandle->GPIO_config.GPIO_pullup_pulldown << (2 * pGPIOHandle->GPIO_config.GPIO_pin_number);  // 2* pin_number -> because speed register also has 2 bits for each pins, therefore if I want to set pin 2 then left shift it 2*2 = 4th bit position of SPEED register.
 8000796:	687b      	ldr	r3, [r7, #4]
 8000798:	7a1b      	ldrb	r3, [r3, #8]
 800079a:	461a      	mov	r2, r3
 800079c:	687b      	ldr	r3, [r7, #4]
 800079e:	791b      	ldrb	r3, [r3, #4]
 80007a0:	005b      	lsls	r3, r3, #1
 80007a2:	fa02 f303 	lsl.w	r3, r2, r3
 80007a6:	60fb      	str	r3, [r7, #12]
	pGPIOHandle->pGPIOx_baseAddr->PUPDR |= temp;
 80007a8:	687b      	ldr	r3, [r7, #4]
 80007aa:	681b      	ldr	r3, [r3, #0]
 80007ac:	68d9      	ldr	r1, [r3, #12]
 80007ae:	687b      	ldr	r3, [r7, #4]
 80007b0:	681b      	ldr	r3, [r3, #0]
 80007b2:	68fa      	ldr	r2, [r7, #12]
 80007b4:	430a      	orrs	r2, r1
 80007b6:	60da      	str	r2, [r3, #12]
	if (pGPIOHandle->GPIO_config.GPIO_mode == GPIO_MODE_AF){
		//ALTERNATE FUNCTION CODE LATER
	}


}
 80007b8:	bf00      	nop
 80007ba:	3714      	adds	r7, #20
 80007bc:	46bd      	mov	sp, r7
 80007be:	bc80      	pop	{r7}
 80007c0:	4770      	bx	lr
 80007c2:	bf00      	nop
 80007c4:	40013c00 	.word	0x40013c00
 80007c8:	40020000 	.word	0x40020000
 80007cc:	40020400 	.word	0x40020400
 80007d0:	40020800 	.word	0x40020800
 80007d4:	40020c00 	.word	0x40020c00
 80007d8:	40021000 	.word	0x40021000
 80007dc:	40021c00 	.word	0x40021c00
 80007e0:	40023800 	.word	0x40023800
 80007e4:	40013800 	.word	0x40013800

080007e8 <GPIO_PeriCLKControl>:
 * @return			- none
 *
 * @note			- none
 *
 * */
void GPIO_PeriCLKControl(GPIO_Reg_t *pGPIOx_baseAddr, uint8_t EnorDi){
 80007e8:	b480      	push	{r7}
 80007ea:	b083      	sub	sp, #12
 80007ec:	af00      	add	r7, sp, #0
 80007ee:	6078      	str	r0, [r7, #4]
 80007f0:	460b      	mov	r3, r1
 80007f2:	70fb      	strb	r3, [r7, #3]

	if(EnorDi == ENABLE){
 80007f4:	78fb      	ldrb	r3, [r7, #3]
 80007f6:	2b00      	cmp	r3, #0
 80007f8:	d141      	bne.n	800087e <GPIO_PeriCLKControl+0x96>
		if (pGPIOx_baseAddr == GPIOA){ // checking address containing in the pointer "pGPIOx_baseAddr"
 80007fa:	687b      	ldr	r3, [r7, #4]
 80007fc:	4a43      	ldr	r2, [pc, #268]	@ (800090c <GPIO_PeriCLKControl+0x124>)
 80007fe:	4293      	cmp	r3, r2
 8000800:	d106      	bne.n	8000810 <GPIO_PeriCLKControl+0x28>
			GPIOA_CLK_EN();
 8000802:	4b43      	ldr	r3, [pc, #268]	@ (8000910 <GPIO_PeriCLKControl+0x128>)
 8000804:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000806:	4a42      	ldr	r2, [pc, #264]	@ (8000910 <GPIO_PeriCLKControl+0x128>)
 8000808:	f043 0301 	orr.w	r3, r3, #1
 800080c:	6313      	str	r3, [r2, #48]	@ 0x30
		else if(pGPIOx_baseAddr == GPIOH){
			GPIOH_CLK_DI();
		}
	}

}
 800080e:	e077      	b.n	8000900 <GPIO_PeriCLKControl+0x118>
		else if(pGPIOx_baseAddr == GPIOB){
 8000810:	687b      	ldr	r3, [r7, #4]
 8000812:	4a40      	ldr	r2, [pc, #256]	@ (8000914 <GPIO_PeriCLKControl+0x12c>)
 8000814:	4293      	cmp	r3, r2
 8000816:	d106      	bne.n	8000826 <GPIO_PeriCLKControl+0x3e>
			GPIOB_CLK_EN();
 8000818:	4b3d      	ldr	r3, [pc, #244]	@ (8000910 <GPIO_PeriCLKControl+0x128>)
 800081a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800081c:	4a3c      	ldr	r2, [pc, #240]	@ (8000910 <GPIO_PeriCLKControl+0x128>)
 800081e:	f043 0302 	orr.w	r3, r3, #2
 8000822:	6313      	str	r3, [r2, #48]	@ 0x30
}
 8000824:	e06c      	b.n	8000900 <GPIO_PeriCLKControl+0x118>
		else if(pGPIOx_baseAddr == GPIOC){
 8000826:	687b      	ldr	r3, [r7, #4]
 8000828:	4a3b      	ldr	r2, [pc, #236]	@ (8000918 <GPIO_PeriCLKControl+0x130>)
 800082a:	4293      	cmp	r3, r2
 800082c:	d106      	bne.n	800083c <GPIO_PeriCLKControl+0x54>
			GPIOC_CLK_EN();
 800082e:	4b38      	ldr	r3, [pc, #224]	@ (8000910 <GPIO_PeriCLKControl+0x128>)
 8000830:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000832:	4a37      	ldr	r2, [pc, #220]	@ (8000910 <GPIO_PeriCLKControl+0x128>)
 8000834:	f043 0304 	orr.w	r3, r3, #4
 8000838:	6313      	str	r3, [r2, #48]	@ 0x30
}
 800083a:	e061      	b.n	8000900 <GPIO_PeriCLKControl+0x118>
		else if(pGPIOx_baseAddr == GPIOD){
 800083c:	687b      	ldr	r3, [r7, #4]
 800083e:	4a37      	ldr	r2, [pc, #220]	@ (800091c <GPIO_PeriCLKControl+0x134>)
 8000840:	4293      	cmp	r3, r2
 8000842:	d106      	bne.n	8000852 <GPIO_PeriCLKControl+0x6a>
			GPIOD_CLK_EN();
 8000844:	4b32      	ldr	r3, [pc, #200]	@ (8000910 <GPIO_PeriCLKControl+0x128>)
 8000846:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000848:	4a31      	ldr	r2, [pc, #196]	@ (8000910 <GPIO_PeriCLKControl+0x128>)
 800084a:	f043 0308 	orr.w	r3, r3, #8
 800084e:	6313      	str	r3, [r2, #48]	@ 0x30
}
 8000850:	e056      	b.n	8000900 <GPIO_PeriCLKControl+0x118>
		else if(pGPIOx_baseAddr == GPIOE){
 8000852:	687b      	ldr	r3, [r7, #4]
 8000854:	4a32      	ldr	r2, [pc, #200]	@ (8000920 <GPIO_PeriCLKControl+0x138>)
 8000856:	4293      	cmp	r3, r2
 8000858:	d106      	bne.n	8000868 <GPIO_PeriCLKControl+0x80>
			GPIOE_CLK_EN();
 800085a:	4b2d      	ldr	r3, [pc, #180]	@ (8000910 <GPIO_PeriCLKControl+0x128>)
 800085c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800085e:	4a2c      	ldr	r2, [pc, #176]	@ (8000910 <GPIO_PeriCLKControl+0x128>)
 8000860:	f043 0310 	orr.w	r3, r3, #16
 8000864:	6313      	str	r3, [r2, #48]	@ 0x30
}
 8000866:	e04b      	b.n	8000900 <GPIO_PeriCLKControl+0x118>
		else if(pGPIOx_baseAddr == GPIOH){
 8000868:	687b      	ldr	r3, [r7, #4]
 800086a:	4a2e      	ldr	r2, [pc, #184]	@ (8000924 <GPIO_PeriCLKControl+0x13c>)
 800086c:	4293      	cmp	r3, r2
 800086e:	d147      	bne.n	8000900 <GPIO_PeriCLKControl+0x118>
			GPIOH_CLK_EN();
 8000870:	4b27      	ldr	r3, [pc, #156]	@ (8000910 <GPIO_PeriCLKControl+0x128>)
 8000872:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000874:	4a26      	ldr	r2, [pc, #152]	@ (8000910 <GPIO_PeriCLKControl+0x128>)
 8000876:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800087a:	6313      	str	r3, [r2, #48]	@ 0x30
}
 800087c:	e040      	b.n	8000900 <GPIO_PeriCLKControl+0x118>
		if (pGPIOx_baseAddr == GPIOA){
 800087e:	687b      	ldr	r3, [r7, #4]
 8000880:	4a22      	ldr	r2, [pc, #136]	@ (800090c <GPIO_PeriCLKControl+0x124>)
 8000882:	4293      	cmp	r3, r2
 8000884:	d106      	bne.n	8000894 <GPIO_PeriCLKControl+0xac>
			GPIOA_CLK_DI();
 8000886:	4b22      	ldr	r3, [pc, #136]	@ (8000910 <GPIO_PeriCLKControl+0x128>)
 8000888:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800088a:	4a21      	ldr	r2, [pc, #132]	@ (8000910 <GPIO_PeriCLKControl+0x128>)
 800088c:	f023 0301 	bic.w	r3, r3, #1
 8000890:	6313      	str	r3, [r2, #48]	@ 0x30
}
 8000892:	e035      	b.n	8000900 <GPIO_PeriCLKControl+0x118>
		else if(pGPIOx_baseAddr == GPIOB){
 8000894:	687b      	ldr	r3, [r7, #4]
 8000896:	4a1f      	ldr	r2, [pc, #124]	@ (8000914 <GPIO_PeriCLKControl+0x12c>)
 8000898:	4293      	cmp	r3, r2
 800089a:	d106      	bne.n	80008aa <GPIO_PeriCLKControl+0xc2>
			GPIOB_CLK_DI();
 800089c:	4b1c      	ldr	r3, [pc, #112]	@ (8000910 <GPIO_PeriCLKControl+0x128>)
 800089e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80008a0:	4a1b      	ldr	r2, [pc, #108]	@ (8000910 <GPIO_PeriCLKControl+0x128>)
 80008a2:	f023 0302 	bic.w	r3, r3, #2
 80008a6:	6313      	str	r3, [r2, #48]	@ 0x30
}
 80008a8:	e02a      	b.n	8000900 <GPIO_PeriCLKControl+0x118>
		else if(pGPIOx_baseAddr == GPIOC){
 80008aa:	687b      	ldr	r3, [r7, #4]
 80008ac:	4a1a      	ldr	r2, [pc, #104]	@ (8000918 <GPIO_PeriCLKControl+0x130>)
 80008ae:	4293      	cmp	r3, r2
 80008b0:	d106      	bne.n	80008c0 <GPIO_PeriCLKControl+0xd8>
			GPIOC_CLK_DI();
 80008b2:	4b17      	ldr	r3, [pc, #92]	@ (8000910 <GPIO_PeriCLKControl+0x128>)
 80008b4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80008b6:	4a16      	ldr	r2, [pc, #88]	@ (8000910 <GPIO_PeriCLKControl+0x128>)
 80008b8:	f023 0304 	bic.w	r3, r3, #4
 80008bc:	6313      	str	r3, [r2, #48]	@ 0x30
}
 80008be:	e01f      	b.n	8000900 <GPIO_PeriCLKControl+0x118>
		else if(pGPIOx_baseAddr == GPIOD){
 80008c0:	687b      	ldr	r3, [r7, #4]
 80008c2:	4a16      	ldr	r2, [pc, #88]	@ (800091c <GPIO_PeriCLKControl+0x134>)
 80008c4:	4293      	cmp	r3, r2
 80008c6:	d106      	bne.n	80008d6 <GPIO_PeriCLKControl+0xee>
			GPIOD_CLK_DI();
 80008c8:	4b11      	ldr	r3, [pc, #68]	@ (8000910 <GPIO_PeriCLKControl+0x128>)
 80008ca:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80008cc:	4a10      	ldr	r2, [pc, #64]	@ (8000910 <GPIO_PeriCLKControl+0x128>)
 80008ce:	f023 0308 	bic.w	r3, r3, #8
 80008d2:	6313      	str	r3, [r2, #48]	@ 0x30
}
 80008d4:	e014      	b.n	8000900 <GPIO_PeriCLKControl+0x118>
		else if(pGPIOx_baseAddr == GPIOE){
 80008d6:	687b      	ldr	r3, [r7, #4]
 80008d8:	4a11      	ldr	r2, [pc, #68]	@ (8000920 <GPIO_PeriCLKControl+0x138>)
 80008da:	4293      	cmp	r3, r2
 80008dc:	d106      	bne.n	80008ec <GPIO_PeriCLKControl+0x104>
			GPIOE_CLK_DI();
 80008de:	4b0c      	ldr	r3, [pc, #48]	@ (8000910 <GPIO_PeriCLKControl+0x128>)
 80008e0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80008e2:	4a0b      	ldr	r2, [pc, #44]	@ (8000910 <GPIO_PeriCLKControl+0x128>)
 80008e4:	f023 0310 	bic.w	r3, r3, #16
 80008e8:	6313      	str	r3, [r2, #48]	@ 0x30
}
 80008ea:	e009      	b.n	8000900 <GPIO_PeriCLKControl+0x118>
		else if(pGPIOx_baseAddr == GPIOH){
 80008ec:	687b      	ldr	r3, [r7, #4]
 80008ee:	4a0d      	ldr	r2, [pc, #52]	@ (8000924 <GPIO_PeriCLKControl+0x13c>)
 80008f0:	4293      	cmp	r3, r2
 80008f2:	d105      	bne.n	8000900 <GPIO_PeriCLKControl+0x118>
			GPIOH_CLK_DI();
 80008f4:	4b06      	ldr	r3, [pc, #24]	@ (8000910 <GPIO_PeriCLKControl+0x128>)
 80008f6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80008f8:	4a05      	ldr	r2, [pc, #20]	@ (8000910 <GPIO_PeriCLKControl+0x128>)
 80008fa:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80008fe:	6313      	str	r3, [r2, #48]	@ 0x30
}
 8000900:	bf00      	nop
 8000902:	370c      	adds	r7, #12
 8000904:	46bd      	mov	sp, r7
 8000906:	bc80      	pop	{r7}
 8000908:	4770      	bx	lr
 800090a:	bf00      	nop
 800090c:	40020000 	.word	0x40020000
 8000910:	40023800 	.word	0x40023800
 8000914:	40020400 	.word	0x40020400
 8000918:	40020800 	.word	0x40020800
 800091c:	40020c00 	.word	0x40020c00
 8000920:	40021000 	.word	0x40021000
 8000924:	40021c00 	.word	0x40021c00

08000928 <GPIO_ToggleOutputPin>:
 *
 * @note			- Toogling means changing the state of the Pin from it previous state
 *
 * */

void GPIO_ToggleOutputPin(GPIO_Reg_t *pGPIOx_baseAddr, uint8_t PinNumber){
 8000928:	b480      	push	{r7}
 800092a:	b083      	sub	sp, #12
 800092c:	af00      	add	r7, sp, #0
 800092e:	6078      	str	r0, [r7, #4]
 8000930:	460b      	mov	r3, r1
 8000932:	70fb      	strb	r3, [r7, #3]

	pGPIOx_baseAddr->ODR ^=(1<<PinNumber);
 8000934:	687b      	ldr	r3, [r7, #4]
 8000936:	695b      	ldr	r3, [r3, #20]
 8000938:	78fa      	ldrb	r2, [r7, #3]
 800093a:	2101      	movs	r1, #1
 800093c:	fa01 f202 	lsl.w	r2, r1, r2
 8000940:	405a      	eors	r2, r3
 8000942:	687b      	ldr	r3, [r7, #4]
 8000944:	615a      	str	r2, [r3, #20]
}
 8000946:	bf00      	nop
 8000948:	370c      	adds	r7, #12
 800094a:	46bd      	mov	sp, r7
 800094c:	bc80      	pop	{r7}
 800094e:	4770      	bx	lr

08000950 <GPIO_IRQConfig>:
 * @return			- none
 *
 * @note			- none
 *
 * */
void GPIO_IRQConfig(uint8_t IRQNumber, uint8_t IRQPriority, uint8_t EnorDi){
 8000950:	b480      	push	{r7}
 8000952:	b085      	sub	sp, #20
 8000954:	af00      	add	r7, sp, #0
 8000956:	4603      	mov	r3, r0
 8000958:	71fb      	strb	r3, [r7, #7]
 800095a:	460b      	mov	r3, r1
 800095c:	71bb      	strb	r3, [r7, #6]
 800095e:	4613      	mov	r3, r2
 8000960:	717b      	strb	r3, [r7, #5]


	//SETTING THE PRIORITY
	uint8_t iprx = IRQNumber / 4;  //we are finding which IPR register it is
 8000962:	79fb      	ldrb	r3, [r7, #7]
 8000964:	089b      	lsrs	r3, r3, #2
 8000966:	73fb      	strb	r3, [r7, #15]
	uint8_t iprx_section = IRQNumber % 4;
 8000968:	79fb      	ldrb	r3, [r7, #7]
 800096a:	f003 0303 	and.w	r3, r3, #3
 800096e:	73bb      	strb	r3, [r7, #14]

	uint32_t shiftamount = (8 * iprx_section) + (8 - NO_OF_BIT_IMPLEMENTED);
 8000970:	7bbb      	ldrb	r3, [r7, #14]
 8000972:	00db      	lsls	r3, r3, #3
 8000974:	3304      	adds	r3, #4
 8000976:	60bb      	str	r3, [r7, #8]
	*(NVIC_PR_BASE_ADDR + iprx *4) |= (IRQPriority << shiftamount); //multiplied by 8 because each section is 8 bit
 8000978:	7bfb      	ldrb	r3, [r7, #15]
 800097a:	011b      	lsls	r3, r3, #4
 800097c:	f103 4360 	add.w	r3, r3, #3758096384	@ 0xe0000000
 8000980:	f503 4364 	add.w	r3, r3, #58368	@ 0xe400
 8000984:	681a      	ldr	r2, [r3, #0]
 8000986:	79b9      	ldrb	r1, [r7, #6]
 8000988:	68bb      	ldr	r3, [r7, #8]
 800098a:	fa01 f303 	lsl.w	r3, r1, r3
 800098e:	4619      	mov	r1, r3
 8000990:	7bfb      	ldrb	r3, [r7, #15]
 8000992:	011b      	lsls	r3, r3, #4
 8000994:	f103 4360 	add.w	r3, r3, #3758096384	@ 0xe0000000
 8000998:	f503 4364 	add.w	r3, r3, #58368	@ 0xe400
 800099c:	430a      	orrs	r2, r1
 800099e:	601a      	str	r2, [r3, #0]



	// ENABLE / DISABLE ISER AND ICER
	if (EnorDi == ENABLE){ //when Enable do ISER (Interrupt set enable register)
 80009a0:	797b      	ldrb	r3, [r7, #5]
 80009a2:	2b00      	cmp	r3, #0
 80009a4:	d133      	bne.n	8000a0e <GPIO_IRQConfig+0xbe>

		if (IRQNumber <=31){
 80009a6:	79fb      	ldrb	r3, [r7, #7]
 80009a8:	2b1f      	cmp	r3, #31
 80009aa:	d80a      	bhi.n	80009c2 <GPIO_IRQConfig+0x72>
			//ISER0 register
			*NVIC_ISER0 |= ( 1 << IRQNumber );
 80009ac:	4b34      	ldr	r3, [pc, #208]	@ (8000a80 <GPIO_IRQConfig+0x130>)
 80009ae:	681b      	ldr	r3, [r3, #0]
 80009b0:	79fa      	ldrb	r2, [r7, #7]
 80009b2:	2101      	movs	r1, #1
 80009b4:	fa01 f202 	lsl.w	r2, r1, r2
 80009b8:	4611      	mov	r1, r2
 80009ba:	4a31      	ldr	r2, [pc, #196]	@ (8000a80 <GPIO_IRQConfig+0x130>)
 80009bc:	430b      	orrs	r3, r1
 80009be:	6013      	str	r3, [r2, #0]
			//ICER2 register
			*NVIC_ICER2 |= ( 1 << IRQNumber % 64 );
		}
	}

}
 80009c0:	e059      	b.n	8000a76 <GPIO_IRQConfig+0x126>
		}else if(IRQNumber >=32 && IRQNumber <=63){
 80009c2:	79fb      	ldrb	r3, [r7, #7]
 80009c4:	2b1f      	cmp	r3, #31
 80009c6:	d90f      	bls.n	80009e8 <GPIO_IRQConfig+0x98>
 80009c8:	79fb      	ldrb	r3, [r7, #7]
 80009ca:	2b3f      	cmp	r3, #63	@ 0x3f
 80009cc:	d80c      	bhi.n	80009e8 <GPIO_IRQConfig+0x98>
			*NVIC_ISER1 |= ( 1 << IRQNumber % 32 );
 80009ce:	4b2d      	ldr	r3, [pc, #180]	@ (8000a84 <GPIO_IRQConfig+0x134>)
 80009d0:	681b      	ldr	r3, [r3, #0]
 80009d2:	79fa      	ldrb	r2, [r7, #7]
 80009d4:	f002 021f 	and.w	r2, r2, #31
 80009d8:	2101      	movs	r1, #1
 80009da:	fa01 f202 	lsl.w	r2, r1, r2
 80009de:	4611      	mov	r1, r2
 80009e0:	4a28      	ldr	r2, [pc, #160]	@ (8000a84 <GPIO_IRQConfig+0x134>)
 80009e2:	430b      	orrs	r3, r1
 80009e4:	6013      	str	r3, [r2, #0]
 80009e6:	e046      	b.n	8000a76 <GPIO_IRQConfig+0x126>
		}else if(IRQNumber >=64 && IRQNumber <96){
 80009e8:	79fb      	ldrb	r3, [r7, #7]
 80009ea:	2b3f      	cmp	r3, #63	@ 0x3f
 80009ec:	d943      	bls.n	8000a76 <GPIO_IRQConfig+0x126>
 80009ee:	79fb      	ldrb	r3, [r7, #7]
 80009f0:	2b5f      	cmp	r3, #95	@ 0x5f
 80009f2:	d840      	bhi.n	8000a76 <GPIO_IRQConfig+0x126>
			*NVIC_ISER2 |= ( 1 << IRQNumber % 64 );
 80009f4:	4b24      	ldr	r3, [pc, #144]	@ (8000a88 <GPIO_IRQConfig+0x138>)
 80009f6:	681b      	ldr	r3, [r3, #0]
 80009f8:	79fa      	ldrb	r2, [r7, #7]
 80009fa:	f002 023f 	and.w	r2, r2, #63	@ 0x3f
 80009fe:	2101      	movs	r1, #1
 8000a00:	fa01 f202 	lsl.w	r2, r1, r2
 8000a04:	4611      	mov	r1, r2
 8000a06:	4a20      	ldr	r2, [pc, #128]	@ (8000a88 <GPIO_IRQConfig+0x138>)
 8000a08:	430b      	orrs	r3, r1
 8000a0a:	6013      	str	r3, [r2, #0]
}
 8000a0c:	e033      	b.n	8000a76 <GPIO_IRQConfig+0x126>
		if (IRQNumber <=31){
 8000a0e:	79fb      	ldrb	r3, [r7, #7]
 8000a10:	2b1f      	cmp	r3, #31
 8000a12:	d80a      	bhi.n	8000a2a <GPIO_IRQConfig+0xda>
			*NVIC_ICER0 |= ( 1 << IRQNumber );
 8000a14:	4b1d      	ldr	r3, [pc, #116]	@ (8000a8c <GPIO_IRQConfig+0x13c>)
 8000a16:	681b      	ldr	r3, [r3, #0]
 8000a18:	79fa      	ldrb	r2, [r7, #7]
 8000a1a:	2101      	movs	r1, #1
 8000a1c:	fa01 f202 	lsl.w	r2, r1, r2
 8000a20:	4611      	mov	r1, r2
 8000a22:	4a1a      	ldr	r2, [pc, #104]	@ (8000a8c <GPIO_IRQConfig+0x13c>)
 8000a24:	430b      	orrs	r3, r1
 8000a26:	6013      	str	r3, [r2, #0]
}
 8000a28:	e025      	b.n	8000a76 <GPIO_IRQConfig+0x126>
		}else if(IRQNumber >=32 && IRQNumber <=63){
 8000a2a:	79fb      	ldrb	r3, [r7, #7]
 8000a2c:	2b1f      	cmp	r3, #31
 8000a2e:	d90f      	bls.n	8000a50 <GPIO_IRQConfig+0x100>
 8000a30:	79fb      	ldrb	r3, [r7, #7]
 8000a32:	2b3f      	cmp	r3, #63	@ 0x3f
 8000a34:	d80c      	bhi.n	8000a50 <GPIO_IRQConfig+0x100>
			*NVIC_ICER1 |= ( 1 << IRQNumber % 32 );
 8000a36:	4b16      	ldr	r3, [pc, #88]	@ (8000a90 <GPIO_IRQConfig+0x140>)
 8000a38:	681b      	ldr	r3, [r3, #0]
 8000a3a:	79fa      	ldrb	r2, [r7, #7]
 8000a3c:	f002 021f 	and.w	r2, r2, #31
 8000a40:	2101      	movs	r1, #1
 8000a42:	fa01 f202 	lsl.w	r2, r1, r2
 8000a46:	4611      	mov	r1, r2
 8000a48:	4a11      	ldr	r2, [pc, #68]	@ (8000a90 <GPIO_IRQConfig+0x140>)
 8000a4a:	430b      	orrs	r3, r1
 8000a4c:	6013      	str	r3, [r2, #0]
 8000a4e:	e012      	b.n	8000a76 <GPIO_IRQConfig+0x126>
		}else if(IRQNumber >=64 && IRQNumber <96){
 8000a50:	79fb      	ldrb	r3, [r7, #7]
 8000a52:	2b3f      	cmp	r3, #63	@ 0x3f
 8000a54:	d90f      	bls.n	8000a76 <GPIO_IRQConfig+0x126>
 8000a56:	79fb      	ldrb	r3, [r7, #7]
 8000a58:	2b5f      	cmp	r3, #95	@ 0x5f
 8000a5a:	d80c      	bhi.n	8000a76 <GPIO_IRQConfig+0x126>
			*NVIC_ICER2 |= ( 1 << IRQNumber % 64 );
 8000a5c:	4b0d      	ldr	r3, [pc, #52]	@ (8000a94 <GPIO_IRQConfig+0x144>)
 8000a5e:	681b      	ldr	r3, [r3, #0]
 8000a60:	79fa      	ldrb	r2, [r7, #7]
 8000a62:	f002 023f 	and.w	r2, r2, #63	@ 0x3f
 8000a66:	2101      	movs	r1, #1
 8000a68:	fa01 f202 	lsl.w	r2, r1, r2
 8000a6c:	4611      	mov	r1, r2
 8000a6e:	4a09      	ldr	r2, [pc, #36]	@ (8000a94 <GPIO_IRQConfig+0x144>)
 8000a70:	430b      	orrs	r3, r1
 8000a72:	6013      	str	r3, [r2, #0]
}
 8000a74:	e7ff      	b.n	8000a76 <GPIO_IRQConfig+0x126>
 8000a76:	bf00      	nop
 8000a78:	3714      	adds	r7, #20
 8000a7a:	46bd      	mov	sp, r7
 8000a7c:	bc80      	pop	{r7}
 8000a7e:	4770      	bx	lr
 8000a80:	e000e100 	.word	0xe000e100
 8000a84:	e000e104 	.word	0xe000e104
 8000a88:	e000e108 	.word	0xe000e108
 8000a8c:	e000e180 	.word	0xe000e180
 8000a90:	e000e184 	.word	0xe000e184
 8000a94:	e000e188 	.word	0xe000e188

08000a98 <GPIO_IRQHandling>:
 * @return			- none
 *
 * @note			- none
 *
 * */
void GPIO_IRQHandling(uint8_t PinNumber){
 8000a98:	b480      	push	{r7}
 8000a9a:	b083      	sub	sp, #12
 8000a9c:	af00      	add	r7, sp, #0
 8000a9e:	4603      	mov	r3, r0
 8000aa0:	71fb      	strb	r3, [r7, #7]

	//Clear PR register in the EXTI line
	if (EXTI->PR & (1 << PinNumber)){
 8000aa2:	4b0c      	ldr	r3, [pc, #48]	@ (8000ad4 <GPIO_IRQHandling+0x3c>)
 8000aa4:	695b      	ldr	r3, [r3, #20]
 8000aa6:	79fa      	ldrb	r2, [r7, #7]
 8000aa8:	2101      	movs	r1, #1
 8000aaa:	fa01 f202 	lsl.w	r2, r1, r2
 8000aae:	4013      	ands	r3, r2
 8000ab0:	2b00      	cmp	r3, #0
 8000ab2:	d009      	beq.n	8000ac8 <GPIO_IRQHandling+0x30>

		//clear the bit by setting 1 not 0 for PR(pending register) in EXTI
		EXTI->PR |= (1 << PinNumber);
 8000ab4:	4b07      	ldr	r3, [pc, #28]	@ (8000ad4 <GPIO_IRQHandling+0x3c>)
 8000ab6:	695b      	ldr	r3, [r3, #20]
 8000ab8:	79fa      	ldrb	r2, [r7, #7]
 8000aba:	2101      	movs	r1, #1
 8000abc:	fa01 f202 	lsl.w	r2, r1, r2
 8000ac0:	4611      	mov	r1, r2
 8000ac2:	4a04      	ldr	r2, [pc, #16]	@ (8000ad4 <GPIO_IRQHandling+0x3c>)
 8000ac4:	430b      	orrs	r3, r1
 8000ac6:	6153      	str	r3, [r2, #20]
	}

}
 8000ac8:	bf00      	nop
 8000aca:	370c      	adds	r7, #12
 8000acc:	46bd      	mov	sp, r7
 8000ace:	bc80      	pop	{r7}
 8000ad0:	4770      	bx	lr
 8000ad2:	bf00      	nop
 8000ad4:	40013c00 	.word	0x40013c00

08000ad8 <std>:
 8000ad8:	2300      	movs	r3, #0
 8000ada:	b510      	push	{r4, lr}
 8000adc:	4604      	mov	r4, r0
 8000ade:	e9c0 3300 	strd	r3, r3, [r0]
 8000ae2:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8000ae6:	6083      	str	r3, [r0, #8]
 8000ae8:	8181      	strh	r1, [r0, #12]
 8000aea:	6643      	str	r3, [r0, #100]	@ 0x64
 8000aec:	81c2      	strh	r2, [r0, #14]
 8000aee:	6183      	str	r3, [r0, #24]
 8000af0:	4619      	mov	r1, r3
 8000af2:	2208      	movs	r2, #8
 8000af4:	305c      	adds	r0, #92	@ 0x5c
 8000af6:	f000 f8c3 	bl	8000c80 <memset>
 8000afa:	4b0d      	ldr	r3, [pc, #52]	@ (8000b30 <std+0x58>)
 8000afc:	6263      	str	r3, [r4, #36]	@ 0x24
 8000afe:	4b0d      	ldr	r3, [pc, #52]	@ (8000b34 <std+0x5c>)
 8000b00:	62a3      	str	r3, [r4, #40]	@ 0x28
 8000b02:	4b0d      	ldr	r3, [pc, #52]	@ (8000b38 <std+0x60>)
 8000b04:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8000b06:	4b0d      	ldr	r3, [pc, #52]	@ (8000b3c <std+0x64>)
 8000b08:	6323      	str	r3, [r4, #48]	@ 0x30
 8000b0a:	4b0d      	ldr	r3, [pc, #52]	@ (8000b40 <std+0x68>)
 8000b0c:	6224      	str	r4, [r4, #32]
 8000b0e:	429c      	cmp	r4, r3
 8000b10:	d006      	beq.n	8000b20 <std+0x48>
 8000b12:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8000b16:	4294      	cmp	r4, r2
 8000b18:	d002      	beq.n	8000b20 <std+0x48>
 8000b1a:	33d0      	adds	r3, #208	@ 0xd0
 8000b1c:	429c      	cmp	r4, r3
 8000b1e:	d105      	bne.n	8000b2c <std+0x54>
 8000b20:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8000b24:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8000b28:	f000 b8dc 	b.w	8000ce4 <__retarget_lock_init_recursive>
 8000b2c:	bd10      	pop	{r4, pc}
 8000b2e:	bf00      	nop
 8000b30:	08001531 	.word	0x08001531
 8000b34:	08001553 	.word	0x08001553
 8000b38:	0800158b 	.word	0x0800158b
 8000b3c:	080015af 	.word	0x080015af
 8000b40:	2000007c 	.word	0x2000007c

08000b44 <stdio_exit_handler>:
 8000b44:	4a02      	ldr	r2, [pc, #8]	@ (8000b50 <stdio_exit_handler+0xc>)
 8000b46:	4903      	ldr	r1, [pc, #12]	@ (8000b54 <stdio_exit_handler+0x10>)
 8000b48:	4803      	ldr	r0, [pc, #12]	@ (8000b58 <stdio_exit_handler+0x14>)
 8000b4a:	f000 b869 	b.w	8000c20 <_fwalk_sglue>
 8000b4e:	bf00      	nop
 8000b50:	20000000 	.word	0x20000000
 8000b54:	080014c9 	.word	0x080014c9
 8000b58:	20000010 	.word	0x20000010

08000b5c <cleanup_stdio>:
 8000b5c:	6841      	ldr	r1, [r0, #4]
 8000b5e:	4b0c      	ldr	r3, [pc, #48]	@ (8000b90 <cleanup_stdio+0x34>)
 8000b60:	4299      	cmp	r1, r3
 8000b62:	b510      	push	{r4, lr}
 8000b64:	4604      	mov	r4, r0
 8000b66:	d001      	beq.n	8000b6c <cleanup_stdio+0x10>
 8000b68:	f000 fcae 	bl	80014c8 <_fflush_r>
 8000b6c:	68a1      	ldr	r1, [r4, #8]
 8000b6e:	4b09      	ldr	r3, [pc, #36]	@ (8000b94 <cleanup_stdio+0x38>)
 8000b70:	4299      	cmp	r1, r3
 8000b72:	d002      	beq.n	8000b7a <cleanup_stdio+0x1e>
 8000b74:	4620      	mov	r0, r4
 8000b76:	f000 fca7 	bl	80014c8 <_fflush_r>
 8000b7a:	68e1      	ldr	r1, [r4, #12]
 8000b7c:	4b06      	ldr	r3, [pc, #24]	@ (8000b98 <cleanup_stdio+0x3c>)
 8000b7e:	4299      	cmp	r1, r3
 8000b80:	d004      	beq.n	8000b8c <cleanup_stdio+0x30>
 8000b82:	4620      	mov	r0, r4
 8000b84:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8000b88:	f000 bc9e 	b.w	80014c8 <_fflush_r>
 8000b8c:	bd10      	pop	{r4, pc}
 8000b8e:	bf00      	nop
 8000b90:	2000007c 	.word	0x2000007c
 8000b94:	200000e4 	.word	0x200000e4
 8000b98:	2000014c 	.word	0x2000014c

08000b9c <global_stdio_init.part.0>:
 8000b9c:	b510      	push	{r4, lr}
 8000b9e:	4b0b      	ldr	r3, [pc, #44]	@ (8000bcc <global_stdio_init.part.0+0x30>)
 8000ba0:	4c0b      	ldr	r4, [pc, #44]	@ (8000bd0 <global_stdio_init.part.0+0x34>)
 8000ba2:	4a0c      	ldr	r2, [pc, #48]	@ (8000bd4 <global_stdio_init.part.0+0x38>)
 8000ba4:	601a      	str	r2, [r3, #0]
 8000ba6:	4620      	mov	r0, r4
 8000ba8:	2200      	movs	r2, #0
 8000baa:	2104      	movs	r1, #4
 8000bac:	f7ff ff94 	bl	8000ad8 <std>
 8000bb0:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8000bb4:	2201      	movs	r2, #1
 8000bb6:	2109      	movs	r1, #9
 8000bb8:	f7ff ff8e 	bl	8000ad8 <std>
 8000bbc:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8000bc0:	2202      	movs	r2, #2
 8000bc2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8000bc6:	2112      	movs	r1, #18
 8000bc8:	f7ff bf86 	b.w	8000ad8 <std>
 8000bcc:	200001b4 	.word	0x200001b4
 8000bd0:	2000007c 	.word	0x2000007c
 8000bd4:	08000b45 	.word	0x08000b45

08000bd8 <__sfp_lock_acquire>:
 8000bd8:	4801      	ldr	r0, [pc, #4]	@ (8000be0 <__sfp_lock_acquire+0x8>)
 8000bda:	f000 b884 	b.w	8000ce6 <__retarget_lock_acquire_recursive>
 8000bde:	bf00      	nop
 8000be0:	200001b9 	.word	0x200001b9

08000be4 <__sfp_lock_release>:
 8000be4:	4801      	ldr	r0, [pc, #4]	@ (8000bec <__sfp_lock_release+0x8>)
 8000be6:	f000 b87f 	b.w	8000ce8 <__retarget_lock_release_recursive>
 8000bea:	bf00      	nop
 8000bec:	200001b9 	.word	0x200001b9

08000bf0 <__sinit>:
 8000bf0:	b510      	push	{r4, lr}
 8000bf2:	4604      	mov	r4, r0
 8000bf4:	f7ff fff0 	bl	8000bd8 <__sfp_lock_acquire>
 8000bf8:	6a23      	ldr	r3, [r4, #32]
 8000bfa:	b11b      	cbz	r3, 8000c04 <__sinit+0x14>
 8000bfc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8000c00:	f7ff bff0 	b.w	8000be4 <__sfp_lock_release>
 8000c04:	4b04      	ldr	r3, [pc, #16]	@ (8000c18 <__sinit+0x28>)
 8000c06:	6223      	str	r3, [r4, #32]
 8000c08:	4b04      	ldr	r3, [pc, #16]	@ (8000c1c <__sinit+0x2c>)
 8000c0a:	681b      	ldr	r3, [r3, #0]
 8000c0c:	2b00      	cmp	r3, #0
 8000c0e:	d1f5      	bne.n	8000bfc <__sinit+0xc>
 8000c10:	f7ff ffc4 	bl	8000b9c <global_stdio_init.part.0>
 8000c14:	e7f2      	b.n	8000bfc <__sinit+0xc>
 8000c16:	bf00      	nop
 8000c18:	08000b5d 	.word	0x08000b5d
 8000c1c:	200001b4 	.word	0x200001b4

08000c20 <_fwalk_sglue>:
 8000c20:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8000c24:	4607      	mov	r7, r0
 8000c26:	4688      	mov	r8, r1
 8000c28:	4614      	mov	r4, r2
 8000c2a:	2600      	movs	r6, #0
 8000c2c:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8000c30:	f1b9 0901 	subs.w	r9, r9, #1
 8000c34:	d505      	bpl.n	8000c42 <_fwalk_sglue+0x22>
 8000c36:	6824      	ldr	r4, [r4, #0]
 8000c38:	2c00      	cmp	r4, #0
 8000c3a:	d1f7      	bne.n	8000c2c <_fwalk_sglue+0xc>
 8000c3c:	4630      	mov	r0, r6
 8000c3e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8000c42:	89ab      	ldrh	r3, [r5, #12]
 8000c44:	2b01      	cmp	r3, #1
 8000c46:	d907      	bls.n	8000c58 <_fwalk_sglue+0x38>
 8000c48:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8000c4c:	3301      	adds	r3, #1
 8000c4e:	d003      	beq.n	8000c58 <_fwalk_sglue+0x38>
 8000c50:	4629      	mov	r1, r5
 8000c52:	4638      	mov	r0, r7
 8000c54:	47c0      	blx	r8
 8000c56:	4306      	orrs	r6, r0
 8000c58:	3568      	adds	r5, #104	@ 0x68
 8000c5a:	e7e9      	b.n	8000c30 <_fwalk_sglue+0x10>

08000c5c <iprintf>:
 8000c5c:	b40f      	push	{r0, r1, r2, r3}
 8000c5e:	b507      	push	{r0, r1, r2, lr}
 8000c60:	4906      	ldr	r1, [pc, #24]	@ (8000c7c <iprintf+0x20>)
 8000c62:	ab04      	add	r3, sp, #16
 8000c64:	6808      	ldr	r0, [r1, #0]
 8000c66:	f853 2b04 	ldr.w	r2, [r3], #4
 8000c6a:	6881      	ldr	r1, [r0, #8]
 8000c6c:	9301      	str	r3, [sp, #4]
 8000c6e:	f000 f863 	bl	8000d38 <_vfiprintf_r>
 8000c72:	b003      	add	sp, #12
 8000c74:	f85d eb04 	ldr.w	lr, [sp], #4
 8000c78:	b004      	add	sp, #16
 8000c7a:	4770      	bx	lr
 8000c7c:	2000000c 	.word	0x2000000c

08000c80 <memset>:
 8000c80:	4402      	add	r2, r0
 8000c82:	4603      	mov	r3, r0
 8000c84:	4293      	cmp	r3, r2
 8000c86:	d100      	bne.n	8000c8a <memset+0xa>
 8000c88:	4770      	bx	lr
 8000c8a:	f803 1b01 	strb.w	r1, [r3], #1
 8000c8e:	e7f9      	b.n	8000c84 <memset+0x4>

08000c90 <__errno>:
 8000c90:	4b01      	ldr	r3, [pc, #4]	@ (8000c98 <__errno+0x8>)
 8000c92:	6818      	ldr	r0, [r3, #0]
 8000c94:	4770      	bx	lr
 8000c96:	bf00      	nop
 8000c98:	2000000c 	.word	0x2000000c

08000c9c <__libc_init_array>:
 8000c9c:	b570      	push	{r4, r5, r6, lr}
 8000c9e:	4d0d      	ldr	r5, [pc, #52]	@ (8000cd4 <__libc_init_array+0x38>)
 8000ca0:	4c0d      	ldr	r4, [pc, #52]	@ (8000cd8 <__libc_init_array+0x3c>)
 8000ca2:	1b64      	subs	r4, r4, r5
 8000ca4:	10a4      	asrs	r4, r4, #2
 8000ca6:	2600      	movs	r6, #0
 8000ca8:	42a6      	cmp	r6, r4
 8000caa:	d109      	bne.n	8000cc0 <__libc_init_array+0x24>
 8000cac:	4d0b      	ldr	r5, [pc, #44]	@ (8000cdc <__libc_init_array+0x40>)
 8000cae:	4c0c      	ldr	r4, [pc, #48]	@ (8000ce0 <__libc_init_array+0x44>)
 8000cb0:	f000 fe3a 	bl	8001928 <_init>
 8000cb4:	1b64      	subs	r4, r4, r5
 8000cb6:	10a4      	asrs	r4, r4, #2
 8000cb8:	2600      	movs	r6, #0
 8000cba:	42a6      	cmp	r6, r4
 8000cbc:	d105      	bne.n	8000cca <__libc_init_array+0x2e>
 8000cbe:	bd70      	pop	{r4, r5, r6, pc}
 8000cc0:	f855 3b04 	ldr.w	r3, [r5], #4
 8000cc4:	4798      	blx	r3
 8000cc6:	3601      	adds	r6, #1
 8000cc8:	e7ee      	b.n	8000ca8 <__libc_init_array+0xc>
 8000cca:	f855 3b04 	ldr.w	r3, [r5], #4
 8000cce:	4798      	blx	r3
 8000cd0:	3601      	adds	r6, #1
 8000cd2:	e7f2      	b.n	8000cba <__libc_init_array+0x1e>
 8000cd4:	0800198c 	.word	0x0800198c
 8000cd8:	0800198c 	.word	0x0800198c
 8000cdc:	0800198c 	.word	0x0800198c
 8000ce0:	08001990 	.word	0x08001990

08000ce4 <__retarget_lock_init_recursive>:
 8000ce4:	4770      	bx	lr

08000ce6 <__retarget_lock_acquire_recursive>:
 8000ce6:	4770      	bx	lr

08000ce8 <__retarget_lock_release_recursive>:
 8000ce8:	4770      	bx	lr

08000cea <__sfputc_r>:
 8000cea:	6893      	ldr	r3, [r2, #8]
 8000cec:	3b01      	subs	r3, #1
 8000cee:	2b00      	cmp	r3, #0
 8000cf0:	b410      	push	{r4}
 8000cf2:	6093      	str	r3, [r2, #8]
 8000cf4:	da07      	bge.n	8000d06 <__sfputc_r+0x1c>
 8000cf6:	6994      	ldr	r4, [r2, #24]
 8000cf8:	42a3      	cmp	r3, r4
 8000cfa:	db01      	blt.n	8000d00 <__sfputc_r+0x16>
 8000cfc:	290a      	cmp	r1, #10
 8000cfe:	d102      	bne.n	8000d06 <__sfputc_r+0x1c>
 8000d00:	bc10      	pop	{r4}
 8000d02:	f000 bc58 	b.w	80015b6 <__swbuf_r>
 8000d06:	6813      	ldr	r3, [r2, #0]
 8000d08:	1c58      	adds	r0, r3, #1
 8000d0a:	6010      	str	r0, [r2, #0]
 8000d0c:	7019      	strb	r1, [r3, #0]
 8000d0e:	4608      	mov	r0, r1
 8000d10:	bc10      	pop	{r4}
 8000d12:	4770      	bx	lr

08000d14 <__sfputs_r>:
 8000d14:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000d16:	4606      	mov	r6, r0
 8000d18:	460f      	mov	r7, r1
 8000d1a:	4614      	mov	r4, r2
 8000d1c:	18d5      	adds	r5, r2, r3
 8000d1e:	42ac      	cmp	r4, r5
 8000d20:	d101      	bne.n	8000d26 <__sfputs_r+0x12>
 8000d22:	2000      	movs	r0, #0
 8000d24:	e007      	b.n	8000d36 <__sfputs_r+0x22>
 8000d26:	f814 1b01 	ldrb.w	r1, [r4], #1
 8000d2a:	463a      	mov	r2, r7
 8000d2c:	4630      	mov	r0, r6
 8000d2e:	f7ff ffdc 	bl	8000cea <__sfputc_r>
 8000d32:	1c43      	adds	r3, r0, #1
 8000d34:	d1f3      	bne.n	8000d1e <__sfputs_r+0xa>
 8000d36:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08000d38 <_vfiprintf_r>:
 8000d38:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8000d3c:	460d      	mov	r5, r1
 8000d3e:	b09d      	sub	sp, #116	@ 0x74
 8000d40:	4614      	mov	r4, r2
 8000d42:	4698      	mov	r8, r3
 8000d44:	4606      	mov	r6, r0
 8000d46:	b118      	cbz	r0, 8000d50 <_vfiprintf_r+0x18>
 8000d48:	6a03      	ldr	r3, [r0, #32]
 8000d4a:	b90b      	cbnz	r3, 8000d50 <_vfiprintf_r+0x18>
 8000d4c:	f7ff ff50 	bl	8000bf0 <__sinit>
 8000d50:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8000d52:	07d9      	lsls	r1, r3, #31
 8000d54:	d405      	bmi.n	8000d62 <_vfiprintf_r+0x2a>
 8000d56:	89ab      	ldrh	r3, [r5, #12]
 8000d58:	059a      	lsls	r2, r3, #22
 8000d5a:	d402      	bmi.n	8000d62 <_vfiprintf_r+0x2a>
 8000d5c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8000d5e:	f7ff ffc2 	bl	8000ce6 <__retarget_lock_acquire_recursive>
 8000d62:	89ab      	ldrh	r3, [r5, #12]
 8000d64:	071b      	lsls	r3, r3, #28
 8000d66:	d501      	bpl.n	8000d6c <_vfiprintf_r+0x34>
 8000d68:	692b      	ldr	r3, [r5, #16]
 8000d6a:	b99b      	cbnz	r3, 8000d94 <_vfiprintf_r+0x5c>
 8000d6c:	4629      	mov	r1, r5
 8000d6e:	4630      	mov	r0, r6
 8000d70:	f000 fc60 	bl	8001634 <__swsetup_r>
 8000d74:	b170      	cbz	r0, 8000d94 <_vfiprintf_r+0x5c>
 8000d76:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8000d78:	07dc      	lsls	r4, r3, #31
 8000d7a:	d504      	bpl.n	8000d86 <_vfiprintf_r+0x4e>
 8000d7c:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8000d80:	b01d      	add	sp, #116	@ 0x74
 8000d82:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8000d86:	89ab      	ldrh	r3, [r5, #12]
 8000d88:	0598      	lsls	r0, r3, #22
 8000d8a:	d4f7      	bmi.n	8000d7c <_vfiprintf_r+0x44>
 8000d8c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8000d8e:	f7ff ffab 	bl	8000ce8 <__retarget_lock_release_recursive>
 8000d92:	e7f3      	b.n	8000d7c <_vfiprintf_r+0x44>
 8000d94:	2300      	movs	r3, #0
 8000d96:	9309      	str	r3, [sp, #36]	@ 0x24
 8000d98:	2320      	movs	r3, #32
 8000d9a:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8000d9e:	f8cd 800c 	str.w	r8, [sp, #12]
 8000da2:	2330      	movs	r3, #48	@ 0x30
 8000da4:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 8000f54 <_vfiprintf_r+0x21c>
 8000da8:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8000dac:	f04f 0901 	mov.w	r9, #1
 8000db0:	4623      	mov	r3, r4
 8000db2:	469a      	mov	sl, r3
 8000db4:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000db8:	b10a      	cbz	r2, 8000dbe <_vfiprintf_r+0x86>
 8000dba:	2a25      	cmp	r2, #37	@ 0x25
 8000dbc:	d1f9      	bne.n	8000db2 <_vfiprintf_r+0x7a>
 8000dbe:	ebba 0b04 	subs.w	fp, sl, r4
 8000dc2:	d00b      	beq.n	8000ddc <_vfiprintf_r+0xa4>
 8000dc4:	465b      	mov	r3, fp
 8000dc6:	4622      	mov	r2, r4
 8000dc8:	4629      	mov	r1, r5
 8000dca:	4630      	mov	r0, r6
 8000dcc:	f7ff ffa2 	bl	8000d14 <__sfputs_r>
 8000dd0:	3001      	adds	r0, #1
 8000dd2:	f000 80a7 	beq.w	8000f24 <_vfiprintf_r+0x1ec>
 8000dd6:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8000dd8:	445a      	add	r2, fp
 8000dda:	9209      	str	r2, [sp, #36]	@ 0x24
 8000ddc:	f89a 3000 	ldrb.w	r3, [sl]
 8000de0:	2b00      	cmp	r3, #0
 8000de2:	f000 809f 	beq.w	8000f24 <_vfiprintf_r+0x1ec>
 8000de6:	2300      	movs	r3, #0
 8000de8:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8000dec:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8000df0:	f10a 0a01 	add.w	sl, sl, #1
 8000df4:	9304      	str	r3, [sp, #16]
 8000df6:	9307      	str	r3, [sp, #28]
 8000df8:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8000dfc:	931a      	str	r3, [sp, #104]	@ 0x68
 8000dfe:	4654      	mov	r4, sl
 8000e00:	2205      	movs	r2, #5
 8000e02:	f814 1b01 	ldrb.w	r1, [r4], #1
 8000e06:	4853      	ldr	r0, [pc, #332]	@ (8000f54 <_vfiprintf_r+0x21c>)
 8000e08:	f7ff f9ea 	bl	80001e0 <memchr>
 8000e0c:	9a04      	ldr	r2, [sp, #16]
 8000e0e:	b9d8      	cbnz	r0, 8000e48 <_vfiprintf_r+0x110>
 8000e10:	06d1      	lsls	r1, r2, #27
 8000e12:	bf44      	itt	mi
 8000e14:	2320      	movmi	r3, #32
 8000e16:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8000e1a:	0713      	lsls	r3, r2, #28
 8000e1c:	bf44      	itt	mi
 8000e1e:	232b      	movmi	r3, #43	@ 0x2b
 8000e20:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8000e24:	f89a 3000 	ldrb.w	r3, [sl]
 8000e28:	2b2a      	cmp	r3, #42	@ 0x2a
 8000e2a:	d015      	beq.n	8000e58 <_vfiprintf_r+0x120>
 8000e2c:	9a07      	ldr	r2, [sp, #28]
 8000e2e:	4654      	mov	r4, sl
 8000e30:	2000      	movs	r0, #0
 8000e32:	f04f 0c0a 	mov.w	ip, #10
 8000e36:	4621      	mov	r1, r4
 8000e38:	f811 3b01 	ldrb.w	r3, [r1], #1
 8000e3c:	3b30      	subs	r3, #48	@ 0x30
 8000e3e:	2b09      	cmp	r3, #9
 8000e40:	d94b      	bls.n	8000eda <_vfiprintf_r+0x1a2>
 8000e42:	b1b0      	cbz	r0, 8000e72 <_vfiprintf_r+0x13a>
 8000e44:	9207      	str	r2, [sp, #28]
 8000e46:	e014      	b.n	8000e72 <_vfiprintf_r+0x13a>
 8000e48:	eba0 0308 	sub.w	r3, r0, r8
 8000e4c:	fa09 f303 	lsl.w	r3, r9, r3
 8000e50:	4313      	orrs	r3, r2
 8000e52:	9304      	str	r3, [sp, #16]
 8000e54:	46a2      	mov	sl, r4
 8000e56:	e7d2      	b.n	8000dfe <_vfiprintf_r+0xc6>
 8000e58:	9b03      	ldr	r3, [sp, #12]
 8000e5a:	1d19      	adds	r1, r3, #4
 8000e5c:	681b      	ldr	r3, [r3, #0]
 8000e5e:	9103      	str	r1, [sp, #12]
 8000e60:	2b00      	cmp	r3, #0
 8000e62:	bfbb      	ittet	lt
 8000e64:	425b      	neglt	r3, r3
 8000e66:	f042 0202 	orrlt.w	r2, r2, #2
 8000e6a:	9307      	strge	r3, [sp, #28]
 8000e6c:	9307      	strlt	r3, [sp, #28]
 8000e6e:	bfb8      	it	lt
 8000e70:	9204      	strlt	r2, [sp, #16]
 8000e72:	7823      	ldrb	r3, [r4, #0]
 8000e74:	2b2e      	cmp	r3, #46	@ 0x2e
 8000e76:	d10a      	bne.n	8000e8e <_vfiprintf_r+0x156>
 8000e78:	7863      	ldrb	r3, [r4, #1]
 8000e7a:	2b2a      	cmp	r3, #42	@ 0x2a
 8000e7c:	d132      	bne.n	8000ee4 <_vfiprintf_r+0x1ac>
 8000e7e:	9b03      	ldr	r3, [sp, #12]
 8000e80:	1d1a      	adds	r2, r3, #4
 8000e82:	681b      	ldr	r3, [r3, #0]
 8000e84:	9203      	str	r2, [sp, #12]
 8000e86:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8000e8a:	3402      	adds	r4, #2
 8000e8c:	9305      	str	r3, [sp, #20]
 8000e8e:	f8df a0c8 	ldr.w	sl, [pc, #200]	@ 8000f58 <_vfiprintf_r+0x220>
 8000e92:	7821      	ldrb	r1, [r4, #0]
 8000e94:	2203      	movs	r2, #3
 8000e96:	4650      	mov	r0, sl
 8000e98:	f7ff f9a2 	bl	80001e0 <memchr>
 8000e9c:	b138      	cbz	r0, 8000eae <_vfiprintf_r+0x176>
 8000e9e:	9b04      	ldr	r3, [sp, #16]
 8000ea0:	eba0 000a 	sub.w	r0, r0, sl
 8000ea4:	2240      	movs	r2, #64	@ 0x40
 8000ea6:	4082      	lsls	r2, r0
 8000ea8:	4313      	orrs	r3, r2
 8000eaa:	3401      	adds	r4, #1
 8000eac:	9304      	str	r3, [sp, #16]
 8000eae:	f814 1b01 	ldrb.w	r1, [r4], #1
 8000eb2:	482a      	ldr	r0, [pc, #168]	@ (8000f5c <_vfiprintf_r+0x224>)
 8000eb4:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8000eb8:	2206      	movs	r2, #6
 8000eba:	f7ff f991 	bl	80001e0 <memchr>
 8000ebe:	2800      	cmp	r0, #0
 8000ec0:	d03f      	beq.n	8000f42 <_vfiprintf_r+0x20a>
 8000ec2:	4b27      	ldr	r3, [pc, #156]	@ (8000f60 <_vfiprintf_r+0x228>)
 8000ec4:	bb1b      	cbnz	r3, 8000f0e <_vfiprintf_r+0x1d6>
 8000ec6:	9b03      	ldr	r3, [sp, #12]
 8000ec8:	3307      	adds	r3, #7
 8000eca:	f023 0307 	bic.w	r3, r3, #7
 8000ece:	3308      	adds	r3, #8
 8000ed0:	9303      	str	r3, [sp, #12]
 8000ed2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8000ed4:	443b      	add	r3, r7
 8000ed6:	9309      	str	r3, [sp, #36]	@ 0x24
 8000ed8:	e76a      	b.n	8000db0 <_vfiprintf_r+0x78>
 8000eda:	fb0c 3202 	mla	r2, ip, r2, r3
 8000ede:	460c      	mov	r4, r1
 8000ee0:	2001      	movs	r0, #1
 8000ee2:	e7a8      	b.n	8000e36 <_vfiprintf_r+0xfe>
 8000ee4:	2300      	movs	r3, #0
 8000ee6:	3401      	adds	r4, #1
 8000ee8:	9305      	str	r3, [sp, #20]
 8000eea:	4619      	mov	r1, r3
 8000eec:	f04f 0c0a 	mov.w	ip, #10
 8000ef0:	4620      	mov	r0, r4
 8000ef2:	f810 2b01 	ldrb.w	r2, [r0], #1
 8000ef6:	3a30      	subs	r2, #48	@ 0x30
 8000ef8:	2a09      	cmp	r2, #9
 8000efa:	d903      	bls.n	8000f04 <_vfiprintf_r+0x1cc>
 8000efc:	2b00      	cmp	r3, #0
 8000efe:	d0c6      	beq.n	8000e8e <_vfiprintf_r+0x156>
 8000f00:	9105      	str	r1, [sp, #20]
 8000f02:	e7c4      	b.n	8000e8e <_vfiprintf_r+0x156>
 8000f04:	fb0c 2101 	mla	r1, ip, r1, r2
 8000f08:	4604      	mov	r4, r0
 8000f0a:	2301      	movs	r3, #1
 8000f0c:	e7f0      	b.n	8000ef0 <_vfiprintf_r+0x1b8>
 8000f0e:	ab03      	add	r3, sp, #12
 8000f10:	9300      	str	r3, [sp, #0]
 8000f12:	462a      	mov	r2, r5
 8000f14:	4b13      	ldr	r3, [pc, #76]	@ (8000f64 <_vfiprintf_r+0x22c>)
 8000f16:	a904      	add	r1, sp, #16
 8000f18:	4630      	mov	r0, r6
 8000f1a:	f3af 8000 	nop.w
 8000f1e:	4607      	mov	r7, r0
 8000f20:	1c78      	adds	r0, r7, #1
 8000f22:	d1d6      	bne.n	8000ed2 <_vfiprintf_r+0x19a>
 8000f24:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8000f26:	07d9      	lsls	r1, r3, #31
 8000f28:	d405      	bmi.n	8000f36 <_vfiprintf_r+0x1fe>
 8000f2a:	89ab      	ldrh	r3, [r5, #12]
 8000f2c:	059a      	lsls	r2, r3, #22
 8000f2e:	d402      	bmi.n	8000f36 <_vfiprintf_r+0x1fe>
 8000f30:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8000f32:	f7ff fed9 	bl	8000ce8 <__retarget_lock_release_recursive>
 8000f36:	89ab      	ldrh	r3, [r5, #12]
 8000f38:	065b      	lsls	r3, r3, #25
 8000f3a:	f53f af1f 	bmi.w	8000d7c <_vfiprintf_r+0x44>
 8000f3e:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8000f40:	e71e      	b.n	8000d80 <_vfiprintf_r+0x48>
 8000f42:	ab03      	add	r3, sp, #12
 8000f44:	9300      	str	r3, [sp, #0]
 8000f46:	462a      	mov	r2, r5
 8000f48:	4b06      	ldr	r3, [pc, #24]	@ (8000f64 <_vfiprintf_r+0x22c>)
 8000f4a:	a904      	add	r1, sp, #16
 8000f4c:	4630      	mov	r0, r6
 8000f4e:	f000 f91b 	bl	8001188 <_printf_i>
 8000f52:	e7e4      	b.n	8000f1e <_vfiprintf_r+0x1e6>
 8000f54:	0800194f 	.word	0x0800194f
 8000f58:	08001955 	.word	0x08001955
 8000f5c:	08001959 	.word	0x08001959
 8000f60:	00000000 	.word	0x00000000
 8000f64:	08000d15 	.word	0x08000d15

08000f68 <sbrk_aligned>:
 8000f68:	b570      	push	{r4, r5, r6, lr}
 8000f6a:	4e0f      	ldr	r6, [pc, #60]	@ (8000fa8 <sbrk_aligned+0x40>)
 8000f6c:	460c      	mov	r4, r1
 8000f6e:	6831      	ldr	r1, [r6, #0]
 8000f70:	4605      	mov	r5, r0
 8000f72:	b911      	cbnz	r1, 8000f7a <sbrk_aligned+0x12>
 8000f74:	f000 fc6c 	bl	8001850 <_sbrk_r>
 8000f78:	6030      	str	r0, [r6, #0]
 8000f7a:	4621      	mov	r1, r4
 8000f7c:	4628      	mov	r0, r5
 8000f7e:	f000 fc67 	bl	8001850 <_sbrk_r>
 8000f82:	1c43      	adds	r3, r0, #1
 8000f84:	d103      	bne.n	8000f8e <sbrk_aligned+0x26>
 8000f86:	f04f 34ff 	mov.w	r4, #4294967295	@ 0xffffffff
 8000f8a:	4620      	mov	r0, r4
 8000f8c:	bd70      	pop	{r4, r5, r6, pc}
 8000f8e:	1cc4      	adds	r4, r0, #3
 8000f90:	f024 0403 	bic.w	r4, r4, #3
 8000f94:	42a0      	cmp	r0, r4
 8000f96:	d0f8      	beq.n	8000f8a <sbrk_aligned+0x22>
 8000f98:	1a21      	subs	r1, r4, r0
 8000f9a:	4628      	mov	r0, r5
 8000f9c:	f000 fc58 	bl	8001850 <_sbrk_r>
 8000fa0:	3001      	adds	r0, #1
 8000fa2:	d1f2      	bne.n	8000f8a <sbrk_aligned+0x22>
 8000fa4:	e7ef      	b.n	8000f86 <sbrk_aligned+0x1e>
 8000fa6:	bf00      	nop
 8000fa8:	200001bc 	.word	0x200001bc

08000fac <_malloc_r>:
 8000fac:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8000fb0:	1ccd      	adds	r5, r1, #3
 8000fb2:	f025 0503 	bic.w	r5, r5, #3
 8000fb6:	3508      	adds	r5, #8
 8000fb8:	2d0c      	cmp	r5, #12
 8000fba:	bf38      	it	cc
 8000fbc:	250c      	movcc	r5, #12
 8000fbe:	2d00      	cmp	r5, #0
 8000fc0:	4606      	mov	r6, r0
 8000fc2:	db01      	blt.n	8000fc8 <_malloc_r+0x1c>
 8000fc4:	42a9      	cmp	r1, r5
 8000fc6:	d904      	bls.n	8000fd2 <_malloc_r+0x26>
 8000fc8:	230c      	movs	r3, #12
 8000fca:	6033      	str	r3, [r6, #0]
 8000fcc:	2000      	movs	r0, #0
 8000fce:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8000fd2:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 80010a8 <_malloc_r+0xfc>
 8000fd6:	f000 fa9f 	bl	8001518 <__malloc_lock>
 8000fda:	f8d8 3000 	ldr.w	r3, [r8]
 8000fde:	461c      	mov	r4, r3
 8000fe0:	bb44      	cbnz	r4, 8001034 <_malloc_r+0x88>
 8000fe2:	4629      	mov	r1, r5
 8000fe4:	4630      	mov	r0, r6
 8000fe6:	f7ff ffbf 	bl	8000f68 <sbrk_aligned>
 8000fea:	1c43      	adds	r3, r0, #1
 8000fec:	4604      	mov	r4, r0
 8000fee:	d158      	bne.n	80010a2 <_malloc_r+0xf6>
 8000ff0:	f8d8 4000 	ldr.w	r4, [r8]
 8000ff4:	4627      	mov	r7, r4
 8000ff6:	2f00      	cmp	r7, #0
 8000ff8:	d143      	bne.n	8001082 <_malloc_r+0xd6>
 8000ffa:	2c00      	cmp	r4, #0
 8000ffc:	d04b      	beq.n	8001096 <_malloc_r+0xea>
 8000ffe:	6823      	ldr	r3, [r4, #0]
 8001000:	4639      	mov	r1, r7
 8001002:	4630      	mov	r0, r6
 8001004:	eb04 0903 	add.w	r9, r4, r3
 8001008:	f000 fc22 	bl	8001850 <_sbrk_r>
 800100c:	4581      	cmp	r9, r0
 800100e:	d142      	bne.n	8001096 <_malloc_r+0xea>
 8001010:	6821      	ldr	r1, [r4, #0]
 8001012:	1a6d      	subs	r5, r5, r1
 8001014:	4629      	mov	r1, r5
 8001016:	4630      	mov	r0, r6
 8001018:	f7ff ffa6 	bl	8000f68 <sbrk_aligned>
 800101c:	3001      	adds	r0, #1
 800101e:	d03a      	beq.n	8001096 <_malloc_r+0xea>
 8001020:	6823      	ldr	r3, [r4, #0]
 8001022:	442b      	add	r3, r5
 8001024:	6023      	str	r3, [r4, #0]
 8001026:	f8d8 3000 	ldr.w	r3, [r8]
 800102a:	685a      	ldr	r2, [r3, #4]
 800102c:	bb62      	cbnz	r2, 8001088 <_malloc_r+0xdc>
 800102e:	f8c8 7000 	str.w	r7, [r8]
 8001032:	e00f      	b.n	8001054 <_malloc_r+0xa8>
 8001034:	6822      	ldr	r2, [r4, #0]
 8001036:	1b52      	subs	r2, r2, r5
 8001038:	d420      	bmi.n	800107c <_malloc_r+0xd0>
 800103a:	2a0b      	cmp	r2, #11
 800103c:	d917      	bls.n	800106e <_malloc_r+0xc2>
 800103e:	1961      	adds	r1, r4, r5
 8001040:	42a3      	cmp	r3, r4
 8001042:	6025      	str	r5, [r4, #0]
 8001044:	bf18      	it	ne
 8001046:	6059      	strne	r1, [r3, #4]
 8001048:	6863      	ldr	r3, [r4, #4]
 800104a:	bf08      	it	eq
 800104c:	f8c8 1000 	streq.w	r1, [r8]
 8001050:	5162      	str	r2, [r4, r5]
 8001052:	604b      	str	r3, [r1, #4]
 8001054:	4630      	mov	r0, r6
 8001056:	f000 fa65 	bl	8001524 <__malloc_unlock>
 800105a:	f104 000b 	add.w	r0, r4, #11
 800105e:	1d23      	adds	r3, r4, #4
 8001060:	f020 0007 	bic.w	r0, r0, #7
 8001064:	1ac2      	subs	r2, r0, r3
 8001066:	bf1c      	itt	ne
 8001068:	1a1b      	subne	r3, r3, r0
 800106a:	50a3      	strne	r3, [r4, r2]
 800106c:	e7af      	b.n	8000fce <_malloc_r+0x22>
 800106e:	6862      	ldr	r2, [r4, #4]
 8001070:	42a3      	cmp	r3, r4
 8001072:	bf0c      	ite	eq
 8001074:	f8c8 2000 	streq.w	r2, [r8]
 8001078:	605a      	strne	r2, [r3, #4]
 800107a:	e7eb      	b.n	8001054 <_malloc_r+0xa8>
 800107c:	4623      	mov	r3, r4
 800107e:	6864      	ldr	r4, [r4, #4]
 8001080:	e7ae      	b.n	8000fe0 <_malloc_r+0x34>
 8001082:	463c      	mov	r4, r7
 8001084:	687f      	ldr	r7, [r7, #4]
 8001086:	e7b6      	b.n	8000ff6 <_malloc_r+0x4a>
 8001088:	461a      	mov	r2, r3
 800108a:	685b      	ldr	r3, [r3, #4]
 800108c:	42a3      	cmp	r3, r4
 800108e:	d1fb      	bne.n	8001088 <_malloc_r+0xdc>
 8001090:	2300      	movs	r3, #0
 8001092:	6053      	str	r3, [r2, #4]
 8001094:	e7de      	b.n	8001054 <_malloc_r+0xa8>
 8001096:	230c      	movs	r3, #12
 8001098:	6033      	str	r3, [r6, #0]
 800109a:	4630      	mov	r0, r6
 800109c:	f000 fa42 	bl	8001524 <__malloc_unlock>
 80010a0:	e794      	b.n	8000fcc <_malloc_r+0x20>
 80010a2:	6005      	str	r5, [r0, #0]
 80010a4:	e7d6      	b.n	8001054 <_malloc_r+0xa8>
 80010a6:	bf00      	nop
 80010a8:	200001c0 	.word	0x200001c0

080010ac <_printf_common>:
 80010ac:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80010b0:	4616      	mov	r6, r2
 80010b2:	4698      	mov	r8, r3
 80010b4:	688a      	ldr	r2, [r1, #8]
 80010b6:	690b      	ldr	r3, [r1, #16]
 80010b8:	f8dd 9020 	ldr.w	r9, [sp, #32]
 80010bc:	4293      	cmp	r3, r2
 80010be:	bfb8      	it	lt
 80010c0:	4613      	movlt	r3, r2
 80010c2:	6033      	str	r3, [r6, #0]
 80010c4:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 80010c8:	4607      	mov	r7, r0
 80010ca:	460c      	mov	r4, r1
 80010cc:	b10a      	cbz	r2, 80010d2 <_printf_common+0x26>
 80010ce:	3301      	adds	r3, #1
 80010d0:	6033      	str	r3, [r6, #0]
 80010d2:	6823      	ldr	r3, [r4, #0]
 80010d4:	0699      	lsls	r1, r3, #26
 80010d6:	bf42      	ittt	mi
 80010d8:	6833      	ldrmi	r3, [r6, #0]
 80010da:	3302      	addmi	r3, #2
 80010dc:	6033      	strmi	r3, [r6, #0]
 80010de:	6825      	ldr	r5, [r4, #0]
 80010e0:	f015 0506 	ands.w	r5, r5, #6
 80010e4:	d106      	bne.n	80010f4 <_printf_common+0x48>
 80010e6:	f104 0a19 	add.w	sl, r4, #25
 80010ea:	68e3      	ldr	r3, [r4, #12]
 80010ec:	6832      	ldr	r2, [r6, #0]
 80010ee:	1a9b      	subs	r3, r3, r2
 80010f0:	42ab      	cmp	r3, r5
 80010f2:	dc26      	bgt.n	8001142 <_printf_common+0x96>
 80010f4:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 80010f8:	6822      	ldr	r2, [r4, #0]
 80010fa:	3b00      	subs	r3, #0
 80010fc:	bf18      	it	ne
 80010fe:	2301      	movne	r3, #1
 8001100:	0692      	lsls	r2, r2, #26
 8001102:	d42b      	bmi.n	800115c <_printf_common+0xb0>
 8001104:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8001108:	4641      	mov	r1, r8
 800110a:	4638      	mov	r0, r7
 800110c:	47c8      	blx	r9
 800110e:	3001      	adds	r0, #1
 8001110:	d01e      	beq.n	8001150 <_printf_common+0xa4>
 8001112:	6823      	ldr	r3, [r4, #0]
 8001114:	6922      	ldr	r2, [r4, #16]
 8001116:	f003 0306 	and.w	r3, r3, #6
 800111a:	2b04      	cmp	r3, #4
 800111c:	bf02      	ittt	eq
 800111e:	68e5      	ldreq	r5, [r4, #12]
 8001120:	6833      	ldreq	r3, [r6, #0]
 8001122:	1aed      	subeq	r5, r5, r3
 8001124:	68a3      	ldr	r3, [r4, #8]
 8001126:	bf0c      	ite	eq
 8001128:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800112c:	2500      	movne	r5, #0
 800112e:	4293      	cmp	r3, r2
 8001130:	bfc4      	itt	gt
 8001132:	1a9b      	subgt	r3, r3, r2
 8001134:	18ed      	addgt	r5, r5, r3
 8001136:	2600      	movs	r6, #0
 8001138:	341a      	adds	r4, #26
 800113a:	42b5      	cmp	r5, r6
 800113c:	d11a      	bne.n	8001174 <_printf_common+0xc8>
 800113e:	2000      	movs	r0, #0
 8001140:	e008      	b.n	8001154 <_printf_common+0xa8>
 8001142:	2301      	movs	r3, #1
 8001144:	4652      	mov	r2, sl
 8001146:	4641      	mov	r1, r8
 8001148:	4638      	mov	r0, r7
 800114a:	47c8      	blx	r9
 800114c:	3001      	adds	r0, #1
 800114e:	d103      	bne.n	8001158 <_printf_common+0xac>
 8001150:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8001154:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8001158:	3501      	adds	r5, #1
 800115a:	e7c6      	b.n	80010ea <_printf_common+0x3e>
 800115c:	18e1      	adds	r1, r4, r3
 800115e:	1c5a      	adds	r2, r3, #1
 8001160:	2030      	movs	r0, #48	@ 0x30
 8001162:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8001166:	4422      	add	r2, r4
 8001168:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 800116c:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8001170:	3302      	adds	r3, #2
 8001172:	e7c7      	b.n	8001104 <_printf_common+0x58>
 8001174:	2301      	movs	r3, #1
 8001176:	4622      	mov	r2, r4
 8001178:	4641      	mov	r1, r8
 800117a:	4638      	mov	r0, r7
 800117c:	47c8      	blx	r9
 800117e:	3001      	adds	r0, #1
 8001180:	d0e6      	beq.n	8001150 <_printf_common+0xa4>
 8001182:	3601      	adds	r6, #1
 8001184:	e7d9      	b.n	800113a <_printf_common+0x8e>
	...

08001188 <_printf_i>:
 8001188:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800118c:	7e0f      	ldrb	r7, [r1, #24]
 800118e:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8001190:	2f78      	cmp	r7, #120	@ 0x78
 8001192:	4691      	mov	r9, r2
 8001194:	4680      	mov	r8, r0
 8001196:	460c      	mov	r4, r1
 8001198:	469a      	mov	sl, r3
 800119a:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800119e:	d807      	bhi.n	80011b0 <_printf_i+0x28>
 80011a0:	2f62      	cmp	r7, #98	@ 0x62
 80011a2:	d80a      	bhi.n	80011ba <_printf_i+0x32>
 80011a4:	2f00      	cmp	r7, #0
 80011a6:	f000 80d2 	beq.w	800134e <_printf_i+0x1c6>
 80011aa:	2f58      	cmp	r7, #88	@ 0x58
 80011ac:	f000 80b9 	beq.w	8001322 <_printf_i+0x19a>
 80011b0:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80011b4:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 80011b8:	e03a      	b.n	8001230 <_printf_i+0xa8>
 80011ba:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 80011be:	2b15      	cmp	r3, #21
 80011c0:	d8f6      	bhi.n	80011b0 <_printf_i+0x28>
 80011c2:	a101      	add	r1, pc, #4	@ (adr r1, 80011c8 <_printf_i+0x40>)
 80011c4:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80011c8:	08001221 	.word	0x08001221
 80011cc:	08001235 	.word	0x08001235
 80011d0:	080011b1 	.word	0x080011b1
 80011d4:	080011b1 	.word	0x080011b1
 80011d8:	080011b1 	.word	0x080011b1
 80011dc:	080011b1 	.word	0x080011b1
 80011e0:	08001235 	.word	0x08001235
 80011e4:	080011b1 	.word	0x080011b1
 80011e8:	080011b1 	.word	0x080011b1
 80011ec:	080011b1 	.word	0x080011b1
 80011f0:	080011b1 	.word	0x080011b1
 80011f4:	08001335 	.word	0x08001335
 80011f8:	0800125f 	.word	0x0800125f
 80011fc:	080012ef 	.word	0x080012ef
 8001200:	080011b1 	.word	0x080011b1
 8001204:	080011b1 	.word	0x080011b1
 8001208:	08001357 	.word	0x08001357
 800120c:	080011b1 	.word	0x080011b1
 8001210:	0800125f 	.word	0x0800125f
 8001214:	080011b1 	.word	0x080011b1
 8001218:	080011b1 	.word	0x080011b1
 800121c:	080012f7 	.word	0x080012f7
 8001220:	6833      	ldr	r3, [r6, #0]
 8001222:	1d1a      	adds	r2, r3, #4
 8001224:	681b      	ldr	r3, [r3, #0]
 8001226:	6032      	str	r2, [r6, #0]
 8001228:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800122c:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8001230:	2301      	movs	r3, #1
 8001232:	e09d      	b.n	8001370 <_printf_i+0x1e8>
 8001234:	6833      	ldr	r3, [r6, #0]
 8001236:	6820      	ldr	r0, [r4, #0]
 8001238:	1d19      	adds	r1, r3, #4
 800123a:	6031      	str	r1, [r6, #0]
 800123c:	0606      	lsls	r6, r0, #24
 800123e:	d501      	bpl.n	8001244 <_printf_i+0xbc>
 8001240:	681d      	ldr	r5, [r3, #0]
 8001242:	e003      	b.n	800124c <_printf_i+0xc4>
 8001244:	0645      	lsls	r5, r0, #25
 8001246:	d5fb      	bpl.n	8001240 <_printf_i+0xb8>
 8001248:	f9b3 5000 	ldrsh.w	r5, [r3]
 800124c:	2d00      	cmp	r5, #0
 800124e:	da03      	bge.n	8001258 <_printf_i+0xd0>
 8001250:	232d      	movs	r3, #45	@ 0x2d
 8001252:	426d      	negs	r5, r5
 8001254:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8001258:	4859      	ldr	r0, [pc, #356]	@ (80013c0 <_printf_i+0x238>)
 800125a:	230a      	movs	r3, #10
 800125c:	e011      	b.n	8001282 <_printf_i+0xfa>
 800125e:	6821      	ldr	r1, [r4, #0]
 8001260:	6833      	ldr	r3, [r6, #0]
 8001262:	0608      	lsls	r0, r1, #24
 8001264:	f853 5b04 	ldr.w	r5, [r3], #4
 8001268:	d402      	bmi.n	8001270 <_printf_i+0xe8>
 800126a:	0649      	lsls	r1, r1, #25
 800126c:	bf48      	it	mi
 800126e:	b2ad      	uxthmi	r5, r5
 8001270:	2f6f      	cmp	r7, #111	@ 0x6f
 8001272:	4853      	ldr	r0, [pc, #332]	@ (80013c0 <_printf_i+0x238>)
 8001274:	6033      	str	r3, [r6, #0]
 8001276:	bf14      	ite	ne
 8001278:	230a      	movne	r3, #10
 800127a:	2308      	moveq	r3, #8
 800127c:	2100      	movs	r1, #0
 800127e:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8001282:	6866      	ldr	r6, [r4, #4]
 8001284:	60a6      	str	r6, [r4, #8]
 8001286:	2e00      	cmp	r6, #0
 8001288:	bfa2      	ittt	ge
 800128a:	6821      	ldrge	r1, [r4, #0]
 800128c:	f021 0104 	bicge.w	r1, r1, #4
 8001290:	6021      	strge	r1, [r4, #0]
 8001292:	b90d      	cbnz	r5, 8001298 <_printf_i+0x110>
 8001294:	2e00      	cmp	r6, #0
 8001296:	d04b      	beq.n	8001330 <_printf_i+0x1a8>
 8001298:	4616      	mov	r6, r2
 800129a:	fbb5 f1f3 	udiv	r1, r5, r3
 800129e:	fb03 5711 	mls	r7, r3, r1, r5
 80012a2:	5dc7      	ldrb	r7, [r0, r7]
 80012a4:	f806 7d01 	strb.w	r7, [r6, #-1]!
 80012a8:	462f      	mov	r7, r5
 80012aa:	42bb      	cmp	r3, r7
 80012ac:	460d      	mov	r5, r1
 80012ae:	d9f4      	bls.n	800129a <_printf_i+0x112>
 80012b0:	2b08      	cmp	r3, #8
 80012b2:	d10b      	bne.n	80012cc <_printf_i+0x144>
 80012b4:	6823      	ldr	r3, [r4, #0]
 80012b6:	07df      	lsls	r7, r3, #31
 80012b8:	d508      	bpl.n	80012cc <_printf_i+0x144>
 80012ba:	6923      	ldr	r3, [r4, #16]
 80012bc:	6861      	ldr	r1, [r4, #4]
 80012be:	4299      	cmp	r1, r3
 80012c0:	bfde      	ittt	le
 80012c2:	2330      	movle	r3, #48	@ 0x30
 80012c4:	f806 3c01 	strble.w	r3, [r6, #-1]
 80012c8:	f106 36ff 	addle.w	r6, r6, #4294967295	@ 0xffffffff
 80012cc:	1b92      	subs	r2, r2, r6
 80012ce:	6122      	str	r2, [r4, #16]
 80012d0:	f8cd a000 	str.w	sl, [sp]
 80012d4:	464b      	mov	r3, r9
 80012d6:	aa03      	add	r2, sp, #12
 80012d8:	4621      	mov	r1, r4
 80012da:	4640      	mov	r0, r8
 80012dc:	f7ff fee6 	bl	80010ac <_printf_common>
 80012e0:	3001      	adds	r0, #1
 80012e2:	d14a      	bne.n	800137a <_printf_i+0x1f2>
 80012e4:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80012e8:	b004      	add	sp, #16
 80012ea:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80012ee:	6823      	ldr	r3, [r4, #0]
 80012f0:	f043 0320 	orr.w	r3, r3, #32
 80012f4:	6023      	str	r3, [r4, #0]
 80012f6:	4833      	ldr	r0, [pc, #204]	@ (80013c4 <_printf_i+0x23c>)
 80012f8:	2778      	movs	r7, #120	@ 0x78
 80012fa:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 80012fe:	6823      	ldr	r3, [r4, #0]
 8001300:	6831      	ldr	r1, [r6, #0]
 8001302:	061f      	lsls	r7, r3, #24
 8001304:	f851 5b04 	ldr.w	r5, [r1], #4
 8001308:	d402      	bmi.n	8001310 <_printf_i+0x188>
 800130a:	065f      	lsls	r7, r3, #25
 800130c:	bf48      	it	mi
 800130e:	b2ad      	uxthmi	r5, r5
 8001310:	6031      	str	r1, [r6, #0]
 8001312:	07d9      	lsls	r1, r3, #31
 8001314:	bf44      	itt	mi
 8001316:	f043 0320 	orrmi.w	r3, r3, #32
 800131a:	6023      	strmi	r3, [r4, #0]
 800131c:	b11d      	cbz	r5, 8001326 <_printf_i+0x19e>
 800131e:	2310      	movs	r3, #16
 8001320:	e7ac      	b.n	800127c <_printf_i+0xf4>
 8001322:	4827      	ldr	r0, [pc, #156]	@ (80013c0 <_printf_i+0x238>)
 8001324:	e7e9      	b.n	80012fa <_printf_i+0x172>
 8001326:	6823      	ldr	r3, [r4, #0]
 8001328:	f023 0320 	bic.w	r3, r3, #32
 800132c:	6023      	str	r3, [r4, #0]
 800132e:	e7f6      	b.n	800131e <_printf_i+0x196>
 8001330:	4616      	mov	r6, r2
 8001332:	e7bd      	b.n	80012b0 <_printf_i+0x128>
 8001334:	6833      	ldr	r3, [r6, #0]
 8001336:	6825      	ldr	r5, [r4, #0]
 8001338:	6961      	ldr	r1, [r4, #20]
 800133a:	1d18      	adds	r0, r3, #4
 800133c:	6030      	str	r0, [r6, #0]
 800133e:	062e      	lsls	r6, r5, #24
 8001340:	681b      	ldr	r3, [r3, #0]
 8001342:	d501      	bpl.n	8001348 <_printf_i+0x1c0>
 8001344:	6019      	str	r1, [r3, #0]
 8001346:	e002      	b.n	800134e <_printf_i+0x1c6>
 8001348:	0668      	lsls	r0, r5, #25
 800134a:	d5fb      	bpl.n	8001344 <_printf_i+0x1bc>
 800134c:	8019      	strh	r1, [r3, #0]
 800134e:	2300      	movs	r3, #0
 8001350:	6123      	str	r3, [r4, #16]
 8001352:	4616      	mov	r6, r2
 8001354:	e7bc      	b.n	80012d0 <_printf_i+0x148>
 8001356:	6833      	ldr	r3, [r6, #0]
 8001358:	1d1a      	adds	r2, r3, #4
 800135a:	6032      	str	r2, [r6, #0]
 800135c:	681e      	ldr	r6, [r3, #0]
 800135e:	6862      	ldr	r2, [r4, #4]
 8001360:	2100      	movs	r1, #0
 8001362:	4630      	mov	r0, r6
 8001364:	f7fe ff3c 	bl	80001e0 <memchr>
 8001368:	b108      	cbz	r0, 800136e <_printf_i+0x1e6>
 800136a:	1b80      	subs	r0, r0, r6
 800136c:	6060      	str	r0, [r4, #4]
 800136e:	6863      	ldr	r3, [r4, #4]
 8001370:	6123      	str	r3, [r4, #16]
 8001372:	2300      	movs	r3, #0
 8001374:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8001378:	e7aa      	b.n	80012d0 <_printf_i+0x148>
 800137a:	6923      	ldr	r3, [r4, #16]
 800137c:	4632      	mov	r2, r6
 800137e:	4649      	mov	r1, r9
 8001380:	4640      	mov	r0, r8
 8001382:	47d0      	blx	sl
 8001384:	3001      	adds	r0, #1
 8001386:	d0ad      	beq.n	80012e4 <_printf_i+0x15c>
 8001388:	6823      	ldr	r3, [r4, #0]
 800138a:	079b      	lsls	r3, r3, #30
 800138c:	d413      	bmi.n	80013b6 <_printf_i+0x22e>
 800138e:	68e0      	ldr	r0, [r4, #12]
 8001390:	9b03      	ldr	r3, [sp, #12]
 8001392:	4298      	cmp	r0, r3
 8001394:	bfb8      	it	lt
 8001396:	4618      	movlt	r0, r3
 8001398:	e7a6      	b.n	80012e8 <_printf_i+0x160>
 800139a:	2301      	movs	r3, #1
 800139c:	4632      	mov	r2, r6
 800139e:	4649      	mov	r1, r9
 80013a0:	4640      	mov	r0, r8
 80013a2:	47d0      	blx	sl
 80013a4:	3001      	adds	r0, #1
 80013a6:	d09d      	beq.n	80012e4 <_printf_i+0x15c>
 80013a8:	3501      	adds	r5, #1
 80013aa:	68e3      	ldr	r3, [r4, #12]
 80013ac:	9903      	ldr	r1, [sp, #12]
 80013ae:	1a5b      	subs	r3, r3, r1
 80013b0:	42ab      	cmp	r3, r5
 80013b2:	dcf2      	bgt.n	800139a <_printf_i+0x212>
 80013b4:	e7eb      	b.n	800138e <_printf_i+0x206>
 80013b6:	2500      	movs	r5, #0
 80013b8:	f104 0619 	add.w	r6, r4, #25
 80013bc:	e7f5      	b.n	80013aa <_printf_i+0x222>
 80013be:	bf00      	nop
 80013c0:	08001960 	.word	0x08001960
 80013c4:	08001971 	.word	0x08001971

080013c8 <__sflush_r>:
 80013c8:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 80013cc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80013ce:	0716      	lsls	r6, r2, #28
 80013d0:	4605      	mov	r5, r0
 80013d2:	460c      	mov	r4, r1
 80013d4:	d454      	bmi.n	8001480 <__sflush_r+0xb8>
 80013d6:	684b      	ldr	r3, [r1, #4]
 80013d8:	2b00      	cmp	r3, #0
 80013da:	dc02      	bgt.n	80013e2 <__sflush_r+0x1a>
 80013dc:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 80013de:	2b00      	cmp	r3, #0
 80013e0:	dd48      	ble.n	8001474 <__sflush_r+0xac>
 80013e2:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 80013e4:	2e00      	cmp	r6, #0
 80013e6:	d045      	beq.n	8001474 <__sflush_r+0xac>
 80013e8:	2300      	movs	r3, #0
 80013ea:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 80013ee:	682f      	ldr	r7, [r5, #0]
 80013f0:	6a21      	ldr	r1, [r4, #32]
 80013f2:	602b      	str	r3, [r5, #0]
 80013f4:	d030      	beq.n	8001458 <__sflush_r+0x90>
 80013f6:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 80013f8:	89a3      	ldrh	r3, [r4, #12]
 80013fa:	0759      	lsls	r1, r3, #29
 80013fc:	d505      	bpl.n	800140a <__sflush_r+0x42>
 80013fe:	6863      	ldr	r3, [r4, #4]
 8001400:	1ad2      	subs	r2, r2, r3
 8001402:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8001404:	b10b      	cbz	r3, 800140a <__sflush_r+0x42>
 8001406:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8001408:	1ad2      	subs	r2, r2, r3
 800140a:	2300      	movs	r3, #0
 800140c:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800140e:	6a21      	ldr	r1, [r4, #32]
 8001410:	4628      	mov	r0, r5
 8001412:	47b0      	blx	r6
 8001414:	1c43      	adds	r3, r0, #1
 8001416:	89a3      	ldrh	r3, [r4, #12]
 8001418:	d106      	bne.n	8001428 <__sflush_r+0x60>
 800141a:	6829      	ldr	r1, [r5, #0]
 800141c:	291d      	cmp	r1, #29
 800141e:	d82b      	bhi.n	8001478 <__sflush_r+0xb0>
 8001420:	4a28      	ldr	r2, [pc, #160]	@ (80014c4 <__sflush_r+0xfc>)
 8001422:	410a      	asrs	r2, r1
 8001424:	07d6      	lsls	r6, r2, #31
 8001426:	d427      	bmi.n	8001478 <__sflush_r+0xb0>
 8001428:	2200      	movs	r2, #0
 800142a:	6062      	str	r2, [r4, #4]
 800142c:	04d9      	lsls	r1, r3, #19
 800142e:	6922      	ldr	r2, [r4, #16]
 8001430:	6022      	str	r2, [r4, #0]
 8001432:	d504      	bpl.n	800143e <__sflush_r+0x76>
 8001434:	1c42      	adds	r2, r0, #1
 8001436:	d101      	bne.n	800143c <__sflush_r+0x74>
 8001438:	682b      	ldr	r3, [r5, #0]
 800143a:	b903      	cbnz	r3, 800143e <__sflush_r+0x76>
 800143c:	6560      	str	r0, [r4, #84]	@ 0x54
 800143e:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8001440:	602f      	str	r7, [r5, #0]
 8001442:	b1b9      	cbz	r1, 8001474 <__sflush_r+0xac>
 8001444:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8001448:	4299      	cmp	r1, r3
 800144a:	d002      	beq.n	8001452 <__sflush_r+0x8a>
 800144c:	4628      	mov	r0, r5
 800144e:	f000 fa21 	bl	8001894 <_free_r>
 8001452:	2300      	movs	r3, #0
 8001454:	6363      	str	r3, [r4, #52]	@ 0x34
 8001456:	e00d      	b.n	8001474 <__sflush_r+0xac>
 8001458:	2301      	movs	r3, #1
 800145a:	4628      	mov	r0, r5
 800145c:	47b0      	blx	r6
 800145e:	4602      	mov	r2, r0
 8001460:	1c50      	adds	r0, r2, #1
 8001462:	d1c9      	bne.n	80013f8 <__sflush_r+0x30>
 8001464:	682b      	ldr	r3, [r5, #0]
 8001466:	2b00      	cmp	r3, #0
 8001468:	d0c6      	beq.n	80013f8 <__sflush_r+0x30>
 800146a:	2b1d      	cmp	r3, #29
 800146c:	d001      	beq.n	8001472 <__sflush_r+0xaa>
 800146e:	2b16      	cmp	r3, #22
 8001470:	d11d      	bne.n	80014ae <__sflush_r+0xe6>
 8001472:	602f      	str	r7, [r5, #0]
 8001474:	2000      	movs	r0, #0
 8001476:	e021      	b.n	80014bc <__sflush_r+0xf4>
 8001478:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800147c:	b21b      	sxth	r3, r3
 800147e:	e01a      	b.n	80014b6 <__sflush_r+0xee>
 8001480:	690f      	ldr	r7, [r1, #16]
 8001482:	2f00      	cmp	r7, #0
 8001484:	d0f6      	beq.n	8001474 <__sflush_r+0xac>
 8001486:	0793      	lsls	r3, r2, #30
 8001488:	680e      	ldr	r6, [r1, #0]
 800148a:	bf08      	it	eq
 800148c:	694b      	ldreq	r3, [r1, #20]
 800148e:	600f      	str	r7, [r1, #0]
 8001490:	bf18      	it	ne
 8001492:	2300      	movne	r3, #0
 8001494:	1bf6      	subs	r6, r6, r7
 8001496:	608b      	str	r3, [r1, #8]
 8001498:	2e00      	cmp	r6, #0
 800149a:	ddeb      	ble.n	8001474 <__sflush_r+0xac>
 800149c:	6a21      	ldr	r1, [r4, #32]
 800149e:	f8d4 c028 	ldr.w	ip, [r4, #40]	@ 0x28
 80014a2:	4633      	mov	r3, r6
 80014a4:	463a      	mov	r2, r7
 80014a6:	4628      	mov	r0, r5
 80014a8:	47e0      	blx	ip
 80014aa:	2800      	cmp	r0, #0
 80014ac:	dc07      	bgt.n	80014be <__sflush_r+0xf6>
 80014ae:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80014b2:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80014b6:	81a3      	strh	r3, [r4, #12]
 80014b8:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80014bc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80014be:	4407      	add	r7, r0
 80014c0:	1a36      	subs	r6, r6, r0
 80014c2:	e7e9      	b.n	8001498 <__sflush_r+0xd0>
 80014c4:	dfbffffe 	.word	0xdfbffffe

080014c8 <_fflush_r>:
 80014c8:	b538      	push	{r3, r4, r5, lr}
 80014ca:	690b      	ldr	r3, [r1, #16]
 80014cc:	4605      	mov	r5, r0
 80014ce:	460c      	mov	r4, r1
 80014d0:	b913      	cbnz	r3, 80014d8 <_fflush_r+0x10>
 80014d2:	2500      	movs	r5, #0
 80014d4:	4628      	mov	r0, r5
 80014d6:	bd38      	pop	{r3, r4, r5, pc}
 80014d8:	b118      	cbz	r0, 80014e2 <_fflush_r+0x1a>
 80014da:	6a03      	ldr	r3, [r0, #32]
 80014dc:	b90b      	cbnz	r3, 80014e2 <_fflush_r+0x1a>
 80014de:	f7ff fb87 	bl	8000bf0 <__sinit>
 80014e2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80014e6:	2b00      	cmp	r3, #0
 80014e8:	d0f3      	beq.n	80014d2 <_fflush_r+0xa>
 80014ea:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 80014ec:	07d0      	lsls	r0, r2, #31
 80014ee:	d404      	bmi.n	80014fa <_fflush_r+0x32>
 80014f0:	0599      	lsls	r1, r3, #22
 80014f2:	d402      	bmi.n	80014fa <_fflush_r+0x32>
 80014f4:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80014f6:	f7ff fbf6 	bl	8000ce6 <__retarget_lock_acquire_recursive>
 80014fa:	4628      	mov	r0, r5
 80014fc:	4621      	mov	r1, r4
 80014fe:	f7ff ff63 	bl	80013c8 <__sflush_r>
 8001502:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8001504:	07da      	lsls	r2, r3, #31
 8001506:	4605      	mov	r5, r0
 8001508:	d4e4      	bmi.n	80014d4 <_fflush_r+0xc>
 800150a:	89a3      	ldrh	r3, [r4, #12]
 800150c:	059b      	lsls	r3, r3, #22
 800150e:	d4e1      	bmi.n	80014d4 <_fflush_r+0xc>
 8001510:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8001512:	f7ff fbe9 	bl	8000ce8 <__retarget_lock_release_recursive>
 8001516:	e7dd      	b.n	80014d4 <_fflush_r+0xc>

08001518 <__malloc_lock>:
 8001518:	4801      	ldr	r0, [pc, #4]	@ (8001520 <__malloc_lock+0x8>)
 800151a:	f7ff bbe4 	b.w	8000ce6 <__retarget_lock_acquire_recursive>
 800151e:	bf00      	nop
 8001520:	200001b8 	.word	0x200001b8

08001524 <__malloc_unlock>:
 8001524:	4801      	ldr	r0, [pc, #4]	@ (800152c <__malloc_unlock+0x8>)
 8001526:	f7ff bbdf 	b.w	8000ce8 <__retarget_lock_release_recursive>
 800152a:	bf00      	nop
 800152c:	200001b8 	.word	0x200001b8

08001530 <__sread>:
 8001530:	b510      	push	{r4, lr}
 8001532:	460c      	mov	r4, r1
 8001534:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8001538:	f000 f978 	bl	800182c <_read_r>
 800153c:	2800      	cmp	r0, #0
 800153e:	bfab      	itete	ge
 8001540:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8001542:	89a3      	ldrhlt	r3, [r4, #12]
 8001544:	181b      	addge	r3, r3, r0
 8001546:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 800154a:	bfac      	ite	ge
 800154c:	6563      	strge	r3, [r4, #84]	@ 0x54
 800154e:	81a3      	strhlt	r3, [r4, #12]
 8001550:	bd10      	pop	{r4, pc}

08001552 <__swrite>:
 8001552:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8001556:	461f      	mov	r7, r3
 8001558:	898b      	ldrh	r3, [r1, #12]
 800155a:	05db      	lsls	r3, r3, #23
 800155c:	4605      	mov	r5, r0
 800155e:	460c      	mov	r4, r1
 8001560:	4616      	mov	r6, r2
 8001562:	d505      	bpl.n	8001570 <__swrite+0x1e>
 8001564:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8001568:	2302      	movs	r3, #2
 800156a:	2200      	movs	r2, #0
 800156c:	f000 f94c 	bl	8001808 <_lseek_r>
 8001570:	89a3      	ldrh	r3, [r4, #12]
 8001572:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8001576:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800157a:	81a3      	strh	r3, [r4, #12]
 800157c:	4632      	mov	r2, r6
 800157e:	463b      	mov	r3, r7
 8001580:	4628      	mov	r0, r5
 8001582:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8001586:	f000 b973 	b.w	8001870 <_write_r>

0800158a <__sseek>:
 800158a:	b510      	push	{r4, lr}
 800158c:	460c      	mov	r4, r1
 800158e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8001592:	f000 f939 	bl	8001808 <_lseek_r>
 8001596:	1c43      	adds	r3, r0, #1
 8001598:	89a3      	ldrh	r3, [r4, #12]
 800159a:	bf15      	itete	ne
 800159c:	6560      	strne	r0, [r4, #84]	@ 0x54
 800159e:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 80015a2:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 80015a6:	81a3      	strheq	r3, [r4, #12]
 80015a8:	bf18      	it	ne
 80015aa:	81a3      	strhne	r3, [r4, #12]
 80015ac:	bd10      	pop	{r4, pc}

080015ae <__sclose>:
 80015ae:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80015b2:	f000 b8f7 	b.w	80017a4 <_close_r>

080015b6 <__swbuf_r>:
 80015b6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80015b8:	460e      	mov	r6, r1
 80015ba:	4614      	mov	r4, r2
 80015bc:	4605      	mov	r5, r0
 80015be:	b118      	cbz	r0, 80015c8 <__swbuf_r+0x12>
 80015c0:	6a03      	ldr	r3, [r0, #32]
 80015c2:	b90b      	cbnz	r3, 80015c8 <__swbuf_r+0x12>
 80015c4:	f7ff fb14 	bl	8000bf0 <__sinit>
 80015c8:	69a3      	ldr	r3, [r4, #24]
 80015ca:	60a3      	str	r3, [r4, #8]
 80015cc:	89a3      	ldrh	r3, [r4, #12]
 80015ce:	071a      	lsls	r2, r3, #28
 80015d0:	d501      	bpl.n	80015d6 <__swbuf_r+0x20>
 80015d2:	6923      	ldr	r3, [r4, #16]
 80015d4:	b943      	cbnz	r3, 80015e8 <__swbuf_r+0x32>
 80015d6:	4621      	mov	r1, r4
 80015d8:	4628      	mov	r0, r5
 80015da:	f000 f82b 	bl	8001634 <__swsetup_r>
 80015de:	b118      	cbz	r0, 80015e8 <__swbuf_r+0x32>
 80015e0:	f04f 37ff 	mov.w	r7, #4294967295	@ 0xffffffff
 80015e4:	4638      	mov	r0, r7
 80015e6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80015e8:	6823      	ldr	r3, [r4, #0]
 80015ea:	6922      	ldr	r2, [r4, #16]
 80015ec:	1a98      	subs	r0, r3, r2
 80015ee:	6963      	ldr	r3, [r4, #20]
 80015f0:	b2f6      	uxtb	r6, r6
 80015f2:	4283      	cmp	r3, r0
 80015f4:	4637      	mov	r7, r6
 80015f6:	dc05      	bgt.n	8001604 <__swbuf_r+0x4e>
 80015f8:	4621      	mov	r1, r4
 80015fa:	4628      	mov	r0, r5
 80015fc:	f7ff ff64 	bl	80014c8 <_fflush_r>
 8001600:	2800      	cmp	r0, #0
 8001602:	d1ed      	bne.n	80015e0 <__swbuf_r+0x2a>
 8001604:	68a3      	ldr	r3, [r4, #8]
 8001606:	3b01      	subs	r3, #1
 8001608:	60a3      	str	r3, [r4, #8]
 800160a:	6823      	ldr	r3, [r4, #0]
 800160c:	1c5a      	adds	r2, r3, #1
 800160e:	6022      	str	r2, [r4, #0]
 8001610:	701e      	strb	r6, [r3, #0]
 8001612:	6962      	ldr	r2, [r4, #20]
 8001614:	1c43      	adds	r3, r0, #1
 8001616:	429a      	cmp	r2, r3
 8001618:	d004      	beq.n	8001624 <__swbuf_r+0x6e>
 800161a:	89a3      	ldrh	r3, [r4, #12]
 800161c:	07db      	lsls	r3, r3, #31
 800161e:	d5e1      	bpl.n	80015e4 <__swbuf_r+0x2e>
 8001620:	2e0a      	cmp	r6, #10
 8001622:	d1df      	bne.n	80015e4 <__swbuf_r+0x2e>
 8001624:	4621      	mov	r1, r4
 8001626:	4628      	mov	r0, r5
 8001628:	f7ff ff4e 	bl	80014c8 <_fflush_r>
 800162c:	2800      	cmp	r0, #0
 800162e:	d0d9      	beq.n	80015e4 <__swbuf_r+0x2e>
 8001630:	e7d6      	b.n	80015e0 <__swbuf_r+0x2a>
	...

08001634 <__swsetup_r>:
 8001634:	b538      	push	{r3, r4, r5, lr}
 8001636:	4b29      	ldr	r3, [pc, #164]	@ (80016dc <__swsetup_r+0xa8>)
 8001638:	4605      	mov	r5, r0
 800163a:	6818      	ldr	r0, [r3, #0]
 800163c:	460c      	mov	r4, r1
 800163e:	b118      	cbz	r0, 8001648 <__swsetup_r+0x14>
 8001640:	6a03      	ldr	r3, [r0, #32]
 8001642:	b90b      	cbnz	r3, 8001648 <__swsetup_r+0x14>
 8001644:	f7ff fad4 	bl	8000bf0 <__sinit>
 8001648:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800164c:	0719      	lsls	r1, r3, #28
 800164e:	d422      	bmi.n	8001696 <__swsetup_r+0x62>
 8001650:	06da      	lsls	r2, r3, #27
 8001652:	d407      	bmi.n	8001664 <__swsetup_r+0x30>
 8001654:	2209      	movs	r2, #9
 8001656:	602a      	str	r2, [r5, #0]
 8001658:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800165c:	81a3      	strh	r3, [r4, #12]
 800165e:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8001662:	e033      	b.n	80016cc <__swsetup_r+0x98>
 8001664:	0758      	lsls	r0, r3, #29
 8001666:	d512      	bpl.n	800168e <__swsetup_r+0x5a>
 8001668:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800166a:	b141      	cbz	r1, 800167e <__swsetup_r+0x4a>
 800166c:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8001670:	4299      	cmp	r1, r3
 8001672:	d002      	beq.n	800167a <__swsetup_r+0x46>
 8001674:	4628      	mov	r0, r5
 8001676:	f000 f90d 	bl	8001894 <_free_r>
 800167a:	2300      	movs	r3, #0
 800167c:	6363      	str	r3, [r4, #52]	@ 0x34
 800167e:	89a3      	ldrh	r3, [r4, #12]
 8001680:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8001684:	81a3      	strh	r3, [r4, #12]
 8001686:	2300      	movs	r3, #0
 8001688:	6063      	str	r3, [r4, #4]
 800168a:	6923      	ldr	r3, [r4, #16]
 800168c:	6023      	str	r3, [r4, #0]
 800168e:	89a3      	ldrh	r3, [r4, #12]
 8001690:	f043 0308 	orr.w	r3, r3, #8
 8001694:	81a3      	strh	r3, [r4, #12]
 8001696:	6923      	ldr	r3, [r4, #16]
 8001698:	b94b      	cbnz	r3, 80016ae <__swsetup_r+0x7a>
 800169a:	89a3      	ldrh	r3, [r4, #12]
 800169c:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 80016a0:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80016a4:	d003      	beq.n	80016ae <__swsetup_r+0x7a>
 80016a6:	4621      	mov	r1, r4
 80016a8:	4628      	mov	r0, r5
 80016aa:	f000 f83f 	bl	800172c <__smakebuf_r>
 80016ae:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80016b2:	f013 0201 	ands.w	r2, r3, #1
 80016b6:	d00a      	beq.n	80016ce <__swsetup_r+0x9a>
 80016b8:	2200      	movs	r2, #0
 80016ba:	60a2      	str	r2, [r4, #8]
 80016bc:	6962      	ldr	r2, [r4, #20]
 80016be:	4252      	negs	r2, r2
 80016c0:	61a2      	str	r2, [r4, #24]
 80016c2:	6922      	ldr	r2, [r4, #16]
 80016c4:	b942      	cbnz	r2, 80016d8 <__swsetup_r+0xa4>
 80016c6:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 80016ca:	d1c5      	bne.n	8001658 <__swsetup_r+0x24>
 80016cc:	bd38      	pop	{r3, r4, r5, pc}
 80016ce:	0799      	lsls	r1, r3, #30
 80016d0:	bf58      	it	pl
 80016d2:	6962      	ldrpl	r2, [r4, #20]
 80016d4:	60a2      	str	r2, [r4, #8]
 80016d6:	e7f4      	b.n	80016c2 <__swsetup_r+0x8e>
 80016d8:	2000      	movs	r0, #0
 80016da:	e7f7      	b.n	80016cc <__swsetup_r+0x98>
 80016dc:	2000000c 	.word	0x2000000c

080016e0 <__swhatbuf_r>:
 80016e0:	b570      	push	{r4, r5, r6, lr}
 80016e2:	460c      	mov	r4, r1
 80016e4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80016e8:	2900      	cmp	r1, #0
 80016ea:	b096      	sub	sp, #88	@ 0x58
 80016ec:	4615      	mov	r5, r2
 80016ee:	461e      	mov	r6, r3
 80016f0:	da0d      	bge.n	800170e <__swhatbuf_r+0x2e>
 80016f2:	89a3      	ldrh	r3, [r4, #12]
 80016f4:	f013 0f80 	tst.w	r3, #128	@ 0x80
 80016f8:	f04f 0100 	mov.w	r1, #0
 80016fc:	bf14      	ite	ne
 80016fe:	2340      	movne	r3, #64	@ 0x40
 8001700:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8001704:	2000      	movs	r0, #0
 8001706:	6031      	str	r1, [r6, #0]
 8001708:	602b      	str	r3, [r5, #0]
 800170a:	b016      	add	sp, #88	@ 0x58
 800170c:	bd70      	pop	{r4, r5, r6, pc}
 800170e:	466a      	mov	r2, sp
 8001710:	f000 f858 	bl	80017c4 <_fstat_r>
 8001714:	2800      	cmp	r0, #0
 8001716:	dbec      	blt.n	80016f2 <__swhatbuf_r+0x12>
 8001718:	9901      	ldr	r1, [sp, #4]
 800171a:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 800171e:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8001722:	4259      	negs	r1, r3
 8001724:	4159      	adcs	r1, r3
 8001726:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800172a:	e7eb      	b.n	8001704 <__swhatbuf_r+0x24>

0800172c <__smakebuf_r>:
 800172c:	898b      	ldrh	r3, [r1, #12]
 800172e:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8001730:	079d      	lsls	r5, r3, #30
 8001732:	4606      	mov	r6, r0
 8001734:	460c      	mov	r4, r1
 8001736:	d507      	bpl.n	8001748 <__smakebuf_r+0x1c>
 8001738:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 800173c:	6023      	str	r3, [r4, #0]
 800173e:	6123      	str	r3, [r4, #16]
 8001740:	2301      	movs	r3, #1
 8001742:	6163      	str	r3, [r4, #20]
 8001744:	b003      	add	sp, #12
 8001746:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001748:	ab01      	add	r3, sp, #4
 800174a:	466a      	mov	r2, sp
 800174c:	f7ff ffc8 	bl	80016e0 <__swhatbuf_r>
 8001750:	9f00      	ldr	r7, [sp, #0]
 8001752:	4605      	mov	r5, r0
 8001754:	4639      	mov	r1, r7
 8001756:	4630      	mov	r0, r6
 8001758:	f7ff fc28 	bl	8000fac <_malloc_r>
 800175c:	b948      	cbnz	r0, 8001772 <__smakebuf_r+0x46>
 800175e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8001762:	059a      	lsls	r2, r3, #22
 8001764:	d4ee      	bmi.n	8001744 <__smakebuf_r+0x18>
 8001766:	f023 0303 	bic.w	r3, r3, #3
 800176a:	f043 0302 	orr.w	r3, r3, #2
 800176e:	81a3      	strh	r3, [r4, #12]
 8001770:	e7e2      	b.n	8001738 <__smakebuf_r+0xc>
 8001772:	89a3      	ldrh	r3, [r4, #12]
 8001774:	6020      	str	r0, [r4, #0]
 8001776:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800177a:	81a3      	strh	r3, [r4, #12]
 800177c:	9b01      	ldr	r3, [sp, #4]
 800177e:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8001782:	b15b      	cbz	r3, 800179c <__smakebuf_r+0x70>
 8001784:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8001788:	4630      	mov	r0, r6
 800178a:	f000 f82d 	bl	80017e8 <_isatty_r>
 800178e:	b128      	cbz	r0, 800179c <__smakebuf_r+0x70>
 8001790:	89a3      	ldrh	r3, [r4, #12]
 8001792:	f023 0303 	bic.w	r3, r3, #3
 8001796:	f043 0301 	orr.w	r3, r3, #1
 800179a:	81a3      	strh	r3, [r4, #12]
 800179c:	89a3      	ldrh	r3, [r4, #12]
 800179e:	431d      	orrs	r5, r3
 80017a0:	81a5      	strh	r5, [r4, #12]
 80017a2:	e7cf      	b.n	8001744 <__smakebuf_r+0x18>

080017a4 <_close_r>:
 80017a4:	b538      	push	{r3, r4, r5, lr}
 80017a6:	4d06      	ldr	r5, [pc, #24]	@ (80017c0 <_close_r+0x1c>)
 80017a8:	2300      	movs	r3, #0
 80017aa:	4604      	mov	r4, r0
 80017ac:	4608      	mov	r0, r1
 80017ae:	602b      	str	r3, [r5, #0]
 80017b0:	f7fe fe7b 	bl	80004aa <_close>
 80017b4:	1c43      	adds	r3, r0, #1
 80017b6:	d102      	bne.n	80017be <_close_r+0x1a>
 80017b8:	682b      	ldr	r3, [r5, #0]
 80017ba:	b103      	cbz	r3, 80017be <_close_r+0x1a>
 80017bc:	6023      	str	r3, [r4, #0]
 80017be:	bd38      	pop	{r3, r4, r5, pc}
 80017c0:	200001c4 	.word	0x200001c4

080017c4 <_fstat_r>:
 80017c4:	b538      	push	{r3, r4, r5, lr}
 80017c6:	4d07      	ldr	r5, [pc, #28]	@ (80017e4 <_fstat_r+0x20>)
 80017c8:	2300      	movs	r3, #0
 80017ca:	4604      	mov	r4, r0
 80017cc:	4608      	mov	r0, r1
 80017ce:	4611      	mov	r1, r2
 80017d0:	602b      	str	r3, [r5, #0]
 80017d2:	f7fe fe75 	bl	80004c0 <_fstat>
 80017d6:	1c43      	adds	r3, r0, #1
 80017d8:	d102      	bne.n	80017e0 <_fstat_r+0x1c>
 80017da:	682b      	ldr	r3, [r5, #0]
 80017dc:	b103      	cbz	r3, 80017e0 <_fstat_r+0x1c>
 80017de:	6023      	str	r3, [r4, #0]
 80017e0:	bd38      	pop	{r3, r4, r5, pc}
 80017e2:	bf00      	nop
 80017e4:	200001c4 	.word	0x200001c4

080017e8 <_isatty_r>:
 80017e8:	b538      	push	{r3, r4, r5, lr}
 80017ea:	4d06      	ldr	r5, [pc, #24]	@ (8001804 <_isatty_r+0x1c>)
 80017ec:	2300      	movs	r3, #0
 80017ee:	4604      	mov	r4, r0
 80017f0:	4608      	mov	r0, r1
 80017f2:	602b      	str	r3, [r5, #0]
 80017f4:	f7fe fe73 	bl	80004de <_isatty>
 80017f8:	1c43      	adds	r3, r0, #1
 80017fa:	d102      	bne.n	8001802 <_isatty_r+0x1a>
 80017fc:	682b      	ldr	r3, [r5, #0]
 80017fe:	b103      	cbz	r3, 8001802 <_isatty_r+0x1a>
 8001800:	6023      	str	r3, [r4, #0]
 8001802:	bd38      	pop	{r3, r4, r5, pc}
 8001804:	200001c4 	.word	0x200001c4

08001808 <_lseek_r>:
 8001808:	b538      	push	{r3, r4, r5, lr}
 800180a:	4d07      	ldr	r5, [pc, #28]	@ (8001828 <_lseek_r+0x20>)
 800180c:	4604      	mov	r4, r0
 800180e:	4608      	mov	r0, r1
 8001810:	4611      	mov	r1, r2
 8001812:	2200      	movs	r2, #0
 8001814:	602a      	str	r2, [r5, #0]
 8001816:	461a      	mov	r2, r3
 8001818:	f7fe fe6b 	bl	80004f2 <_lseek>
 800181c:	1c43      	adds	r3, r0, #1
 800181e:	d102      	bne.n	8001826 <_lseek_r+0x1e>
 8001820:	682b      	ldr	r3, [r5, #0]
 8001822:	b103      	cbz	r3, 8001826 <_lseek_r+0x1e>
 8001824:	6023      	str	r3, [r4, #0]
 8001826:	bd38      	pop	{r3, r4, r5, pc}
 8001828:	200001c4 	.word	0x200001c4

0800182c <_read_r>:
 800182c:	b538      	push	{r3, r4, r5, lr}
 800182e:	4d07      	ldr	r5, [pc, #28]	@ (800184c <_read_r+0x20>)
 8001830:	4604      	mov	r4, r0
 8001832:	4608      	mov	r0, r1
 8001834:	4611      	mov	r1, r2
 8001836:	2200      	movs	r2, #0
 8001838:	602a      	str	r2, [r5, #0]
 800183a:	461a      	mov	r2, r3
 800183c:	f7fe fdfc 	bl	8000438 <_read>
 8001840:	1c43      	adds	r3, r0, #1
 8001842:	d102      	bne.n	800184a <_read_r+0x1e>
 8001844:	682b      	ldr	r3, [r5, #0]
 8001846:	b103      	cbz	r3, 800184a <_read_r+0x1e>
 8001848:	6023      	str	r3, [r4, #0]
 800184a:	bd38      	pop	{r3, r4, r5, pc}
 800184c:	200001c4 	.word	0x200001c4

08001850 <_sbrk_r>:
 8001850:	b538      	push	{r3, r4, r5, lr}
 8001852:	4d06      	ldr	r5, [pc, #24]	@ (800186c <_sbrk_r+0x1c>)
 8001854:	2300      	movs	r3, #0
 8001856:	4604      	mov	r4, r0
 8001858:	4608      	mov	r0, r1
 800185a:	602b      	str	r3, [r5, #0]
 800185c:	f7fe fe56 	bl	800050c <_sbrk>
 8001860:	1c43      	adds	r3, r0, #1
 8001862:	d102      	bne.n	800186a <_sbrk_r+0x1a>
 8001864:	682b      	ldr	r3, [r5, #0]
 8001866:	b103      	cbz	r3, 800186a <_sbrk_r+0x1a>
 8001868:	6023      	str	r3, [r4, #0]
 800186a:	bd38      	pop	{r3, r4, r5, pc}
 800186c:	200001c4 	.word	0x200001c4

08001870 <_write_r>:
 8001870:	b538      	push	{r3, r4, r5, lr}
 8001872:	4d07      	ldr	r5, [pc, #28]	@ (8001890 <_write_r+0x20>)
 8001874:	4604      	mov	r4, r0
 8001876:	4608      	mov	r0, r1
 8001878:	4611      	mov	r1, r2
 800187a:	2200      	movs	r2, #0
 800187c:	602a      	str	r2, [r5, #0]
 800187e:	461a      	mov	r2, r3
 8001880:	f7fe fdf7 	bl	8000472 <_write>
 8001884:	1c43      	adds	r3, r0, #1
 8001886:	d102      	bne.n	800188e <_write_r+0x1e>
 8001888:	682b      	ldr	r3, [r5, #0]
 800188a:	b103      	cbz	r3, 800188e <_write_r+0x1e>
 800188c:	6023      	str	r3, [r4, #0]
 800188e:	bd38      	pop	{r3, r4, r5, pc}
 8001890:	200001c4 	.word	0x200001c4

08001894 <_free_r>:
 8001894:	b538      	push	{r3, r4, r5, lr}
 8001896:	4605      	mov	r5, r0
 8001898:	2900      	cmp	r1, #0
 800189a:	d041      	beq.n	8001920 <_free_r+0x8c>
 800189c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80018a0:	1f0c      	subs	r4, r1, #4
 80018a2:	2b00      	cmp	r3, #0
 80018a4:	bfb8      	it	lt
 80018a6:	18e4      	addlt	r4, r4, r3
 80018a8:	f7ff fe36 	bl	8001518 <__malloc_lock>
 80018ac:	4a1d      	ldr	r2, [pc, #116]	@ (8001924 <_free_r+0x90>)
 80018ae:	6813      	ldr	r3, [r2, #0]
 80018b0:	b933      	cbnz	r3, 80018c0 <_free_r+0x2c>
 80018b2:	6063      	str	r3, [r4, #4]
 80018b4:	6014      	str	r4, [r2, #0]
 80018b6:	4628      	mov	r0, r5
 80018b8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80018bc:	f7ff be32 	b.w	8001524 <__malloc_unlock>
 80018c0:	42a3      	cmp	r3, r4
 80018c2:	d908      	bls.n	80018d6 <_free_r+0x42>
 80018c4:	6820      	ldr	r0, [r4, #0]
 80018c6:	1821      	adds	r1, r4, r0
 80018c8:	428b      	cmp	r3, r1
 80018ca:	bf01      	itttt	eq
 80018cc:	6819      	ldreq	r1, [r3, #0]
 80018ce:	685b      	ldreq	r3, [r3, #4]
 80018d0:	1809      	addeq	r1, r1, r0
 80018d2:	6021      	streq	r1, [r4, #0]
 80018d4:	e7ed      	b.n	80018b2 <_free_r+0x1e>
 80018d6:	461a      	mov	r2, r3
 80018d8:	685b      	ldr	r3, [r3, #4]
 80018da:	b10b      	cbz	r3, 80018e0 <_free_r+0x4c>
 80018dc:	42a3      	cmp	r3, r4
 80018de:	d9fa      	bls.n	80018d6 <_free_r+0x42>
 80018e0:	6811      	ldr	r1, [r2, #0]
 80018e2:	1850      	adds	r0, r2, r1
 80018e4:	42a0      	cmp	r0, r4
 80018e6:	d10b      	bne.n	8001900 <_free_r+0x6c>
 80018e8:	6820      	ldr	r0, [r4, #0]
 80018ea:	4401      	add	r1, r0
 80018ec:	1850      	adds	r0, r2, r1
 80018ee:	4283      	cmp	r3, r0
 80018f0:	6011      	str	r1, [r2, #0]
 80018f2:	d1e0      	bne.n	80018b6 <_free_r+0x22>
 80018f4:	6818      	ldr	r0, [r3, #0]
 80018f6:	685b      	ldr	r3, [r3, #4]
 80018f8:	6053      	str	r3, [r2, #4]
 80018fa:	4408      	add	r0, r1
 80018fc:	6010      	str	r0, [r2, #0]
 80018fe:	e7da      	b.n	80018b6 <_free_r+0x22>
 8001900:	d902      	bls.n	8001908 <_free_r+0x74>
 8001902:	230c      	movs	r3, #12
 8001904:	602b      	str	r3, [r5, #0]
 8001906:	e7d6      	b.n	80018b6 <_free_r+0x22>
 8001908:	6820      	ldr	r0, [r4, #0]
 800190a:	1821      	adds	r1, r4, r0
 800190c:	428b      	cmp	r3, r1
 800190e:	bf04      	itt	eq
 8001910:	6819      	ldreq	r1, [r3, #0]
 8001912:	685b      	ldreq	r3, [r3, #4]
 8001914:	6063      	str	r3, [r4, #4]
 8001916:	bf04      	itt	eq
 8001918:	1809      	addeq	r1, r1, r0
 800191a:	6021      	streq	r1, [r4, #0]
 800191c:	6054      	str	r4, [r2, #4]
 800191e:	e7ca      	b.n	80018b6 <_free_r+0x22>
 8001920:	bd38      	pop	{r3, r4, r5, pc}
 8001922:	bf00      	nop
 8001924:	200001c0 	.word	0x200001c0

08001928 <_init>:
 8001928:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800192a:	bf00      	nop
 800192c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800192e:	bc08      	pop	{r3}
 8001930:	469e      	mov	lr, r3
 8001932:	4770      	bx	lr

08001934 <_fini>:
 8001934:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001936:	bf00      	nop
 8001938:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800193a:	bc08      	pop	{r3}
 800193c:	469e      	mov	lr, r3
 800193e:	4770      	bx	lr
